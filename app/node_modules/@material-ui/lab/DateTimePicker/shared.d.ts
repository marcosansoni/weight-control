import * as React from 'react';
import { ExportedClockPickerProps } from '../ClockPicker/ClockPicker';
import { OverrideParseableDateProps } from '../internal/pickers/hooks/date-helpers-hooks';
import { ExportedCalendarPickerProps } from '../CalendarPicker/CalendarPicker';
import { DateTimeValidationError, ValidationProps } from '../internal/pickers/hooks/useValidation';
import { ParseableDate } from '../internal/pickers/constants/prop-types';
import { BasePickerProps, ToolbarComponentProps } from '../internal/pickers/typings/BasePicker';
import { ExportedDateInputProps } from '../internal/pickers/PureDateInput';
export declare type DateTimePickerView = 'year' | 'day' | 'month' | 'hours' | 'minutes';
export interface BaseDateTimePickerProps<TDate> extends OverrideParseableDateProps<TDate, ExportedClockPickerProps<TDate> & ExportedCalendarPickerProps<TDate>, 'minDate' | 'maxDate' | 'minTime' | 'maxTime'>, BasePickerProps<ParseableDate<TDate>, TDate | null>, ValidationProps<DateTimeValidationError, ParseableDate<TDate>>, ExportedDateInputProps<ParseableDate<TDate>, TDate | null> {
    /**
     * To show tabs.
     */
    hideTabs?: boolean;
    /**
     * Date tab icon.
     */
    dateRangeIcon?: React.ReactNode;
    /**
     * Time tab icon.
     */
    timeIcon?: React.ReactNode;
    /**
     * Minimal selectable moment of time with binding to date, to set min time in each day use `minTime`.
     */
    minDateTime?: ParseableDate<TDate>;
    /**
     * Minimal selectable moment of time with binding to date, to set max time in each day use `maxTime`.
     */
    maxDateTime?: ParseableDate<TDate>;
    /**
     * First view to show.
     */
    openTo?: DateTimePickerView;
    /**
     * Component that will replace default toolbar renderer.
     * @default DateTimePickerToolbar
     */
    ToolbarComponent?: React.JSXElementConstructor<ToolbarComponentProps>;
    /**
     * Date format, that is displaying in toolbar.
     */
    toolbarFormat?: string;
    /**
     * Array of views to show.
     */
    views?: readonly DateTimePickerView[];
}
declare type DefaultizedProps<Props> = Props & {
    inputFormat: string;
};
export declare function useDateTimePickerDefaultizedProps<Props extends BaseDateTimePickerProps<unknown>>({ ampm, inputFormat, maxDate: __maxDate, maxDateTime: __maxDateTime, maxTime: __maxTime, minDate: __minDate, minDateTime: __minDateTime, minTime: __minTime, openTo, orientation, views, ...other }: Props, name: string): DefaultizedProps<Props>;
export {};
