import _extends from "@babel/runtime/helpers/esm/extends";
import * as React from 'react';
import clsx from 'clsx';
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
import IconButton from '@material-ui/core/IconButton';
import { experimentalStyled as styled } from '@material-ui/core/styles';
import { generateUtilityClasses } from '@material-ui/unstyled';
import PenIcon from '../svg-icons/Pen';
import CalendarIcon from '../svg-icons/Calendar';
import ClockIcon from '../svg-icons/Clock';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var classes = generateUtilityClasses('PrivatePickersToolbar', ['root', 'dateTitleContainer']);
var PickersToolbarRoot = styled('div', {}, {
  skipSx: true
})(function (_ref) {
  var theme = _ref.theme,
      _ref$styleProps = _ref.styleProps,
      styleProps = _ref$styleProps === void 0 ? {} : _ref$styleProps;
  return _extends({
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'flex-start',
    justifyContent: 'space-between',
    padding: theme.spacing(2, 3)
  }, !!styleProps.isLandscape && {
    height: 'auto',
    maxWidth: 160,
    padding: 16,
    justifyContent: 'flex-start',
    flexWrap: 'wrap'
  });
});
var PickersToolbarGrid = styled(Grid, {}, {
  skipSx: true
})({
  flex: 1
});

var _ref2 = /*#__PURE__*/_jsx(ClockIcon, {
  color: "inherit"
});

var _ref3 = /*#__PURE__*/_jsx(CalendarIcon, {
  color: "inherit"
});

var getViewTypeIcon = function getViewTypeIcon(viewType) {
  return viewType === 'clock' ? _ref2 : _ref3;
};

function defaultGetKeyboardInputSwitchingButtonText(isKeyboardInputOpen, viewType) {
  return isKeyboardInputOpen ? "text input view is open, go to ".concat(viewType, " view") : "".concat(viewType, " view is open, go to text input view");
}

var _ref4 = /*#__PURE__*/_jsx(PenIcon, {
  color: "inherit"
});

var PickersToolbar = /*#__PURE__*/React.forwardRef(function PickersToolbar(props, ref) {
  var children = props.children,
      className = props.className,
      _props$getMobileKeybo = props.getMobileKeyboardInputViewButtonText,
      getMobileKeyboardInputViewButtonText = _props$getMobileKeybo === void 0 ? defaultGetKeyboardInputSwitchingButtonText : _props$getMobileKeybo,
      isLandscape = props.isLandscape,
      isMobileKeyboardViewOpen = props.isMobileKeyboardViewOpen,
      _props$landscapeDirec = props.landscapeDirection,
      landscapeDirection = _props$landscapeDirec === void 0 ? 'column' : _props$landscapeDirec,
      penIconClassName = props.penIconClassName,
      toggleMobileKeyboardView = props.toggleMobileKeyboardView,
      toolbarTitle = props.toolbarTitle,
      _props$viewType = props.viewType,
      viewType = _props$viewType === void 0 ? 'calendar' : _props$viewType;

  var styleProps = _extends({}, props);

  return /*#__PURE__*/_jsxs(PickersToolbarRoot, {
    ref: ref,
    className: clsx(classes.root, className),
    styleProps: styleProps,
    children: [/*#__PURE__*/_jsx(Typography, {
      color: "text.secondary",
      variant: "overline",
      children: toolbarTitle
    }), /*#__PURE__*/_jsxs(PickersToolbarGrid, {
      container: true,
      justifyContent: "space-between",
      className: classes.dateTitleContainer,
      direction: isLandscape ? landscapeDirection : 'row',
      alignItems: isLandscape ? 'flex-start' : 'flex-end',
      children: [children, /*#__PURE__*/_jsx(IconButton, {
        onClick: toggleMobileKeyboardView,
        className: penIconClassName,
        color: "inherit",
        "aria-label": getMobileKeyboardInputViewButtonText(isMobileKeyboardViewOpen, viewType),
        children: isMobileKeyboardViewOpen ? getViewTypeIcon(viewType) : _ref4
      })]
    })]
  });
});
export default PickersToolbar;