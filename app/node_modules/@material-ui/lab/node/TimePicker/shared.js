"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTimePickerDefaultizedProps = useTimePickerDefaultizedProps;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var React = _interopRequireWildcard(require("react"));

var _styles = require("@material-ui/core/styles");

var _Clock = _interopRequireDefault(require("../internal/svg-icons/Clock"));

var _textFieldHelper = require("../internal/pickers/text-field-helper");

var _useUtils = require("../internal/pickers/hooks/useUtils");

var _dateHelpersHooks = require("../internal/pickers/hooks/date-helpers-hooks");

var _jsxRuntime = require("react/jsx-runtime");

function getTextFieldAriaText(value, utils) {
  return value && utils.isValid(utils.date(value)) ? `Choose time, selected time is ${utils.format(utils.date(value), 'fullTime')}` : 'Choose time';
}

var _ref2 = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Clock.default, {});

function useTimePickerDefaultizedProps(_ref, name) {
  let {
    ampm,
    inputFormat,
    maxTime: __maxTime,
    minTime: __minTime,
    openTo = 'hours',
    views = ['hours', 'minutes']
  } = _ref,
      other = (0, _objectWithoutPropertiesLoose2.default)(_ref, ["ampm", "inputFormat", "maxTime", "minTime", "openTo", "views"]);
  const utils = (0, _useUtils.useUtils)();
  const minTime = (0, _dateHelpersHooks.useParsedDate)(__minTime);
  const maxTime = (0, _dateHelpersHooks.useParsedDate)(__maxTime);
  const willUseAmPm = ampm !== null && ampm !== void 0 ? ampm : utils.is12HourCycleInCurrentLocale();
  return (0, _styles.unstable_useThemeProps)({
    props: (0, _extends2.default)({
      views,
      openTo,
      minTime,
      maxTime,
      ampm: willUseAmPm,
      acceptRegex: willUseAmPm ? /[\dapAP]/gi : /\d/gi,
      mask: '__:__',
      disableMaskedInput: willUseAmPm,
      getOpenDialogAriaText: getTextFieldAriaText,
      openPickerIcon: _ref2,
      inputFormat: (0, _textFieldHelper.pick12hOr24hFormat)(inputFormat, willUseAmPm, {
        localized: utils.formats.fullTime,
        '12h': utils.formats.fullTime12h,
        '24h': utils.formats.fullTime24h
      })
    }, other),
    name
  });
}