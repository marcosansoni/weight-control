"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _clsx = _interopRequireDefault(require("clsx"));

var _utils = require("@material-ui/core/utils");

var _styles = require("@material-ui/core/styles");

var _unstyled = require("@material-ui/unstyled");

var _TimelineContent = require("../TimelineContent");

var _TimelineOppositeContent = require("../TimelineOppositeContent");

var _TimelineContext = _interopRequireDefault(require("../Timeline/TimelineContext"));

var _timelineItemClasses = require("./timelineItemClasses");

var _jsxRuntime = require("react/jsx-runtime");

const useUtilityClasses = styleProps => {
  const {
    position,
    classes,
    hasOppositeContent
  } = styleProps;
  const slots = {
    root: ['root', `position${(0, _utils.capitalize)(position)}`, !hasOppositeContent && 'missingOppositeContent']
  };
  return (0, _unstyled.unstable_composeClasses)(slots, _timelineItemClasses.getTimelineItemUtilityClass, classes);
};

const TimelineItemRoot = (0, _styles.experimentalStyled)('li', {}, {
  name: 'MuiTimelineItem',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      styleProps
    } = props;
    return (0, _extends2.default)({}, styles.root, styles[`position${(0, _utils.capitalize)(styleProps.position)}`]);
  }
})(({
  styleProps
}) => (0, _extends2.default)({
  listStyle: 'none',
  display: 'flex',
  position: 'relative',
  minHeight: 70
}, styleProps.position === 'left' && {
  flexDirection: 'row-reverse'
}, styleProps.position === 'alternate' && {
  '&:nth-of-type(even)': {
    flexDirection: 'row-reverse',
    [`& .${_TimelineContent.timelineContentClasses.root}`]: {
      textAlign: 'right'
    },
    [`& .${_TimelineOppositeContent.timelineOppositeContentClasses.root}`]: {
      textAlign: 'left'
    }
  }
}, !styleProps.hasOppositeContent && {
  '&:before': {
    content: '""',
    flex: 1,
    padding: '6px 16px'
  }
}));
const TimelineItem = /*#__PURE__*/React.forwardRef(function TimelineItem(inProps, ref) {
  const props = (0, _styles.unstable_useThemeProps)({
    props: inProps,
    name: 'MuiTimelineItem'
  });
  const {
    position: positionProp,
    className
  } = props,
        other = (0, _objectWithoutPropertiesLoose2.default)(props, ["position", "className"]);
  const {
    position: positionContext
  } = React.useContext(_TimelineContext.default);
  let hasOppositeContent = false;
  React.Children.forEach(props.children, child => {
    if ((0, _utils.isMuiElement)(child, ['TimelineOppositeContent'])) {
      hasOppositeContent = true;
    }
  });
  const styleProps = (0, _extends2.default)({}, props, {
    position: positionProp || positionContext || 'right',
    hasOppositeContent
  });
  const classes = useUtilityClasses(styleProps);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimelineContext.default.Provider, {
    value: {
      position: styleProps.position
    },
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TimelineItemRoot, (0, _extends2.default)({
      className: (0, _clsx.default)(classes.root, className),
      styleProps: styleProps,
      ref: ref
    }, other))
  });
});
process.env.NODE_ENV !== "production" ? TimelineItem.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * The content of the component.
   */
  children: _propTypes.default.node,

  /**
   * Override or extend the styles applied to the component.
   */
  classes: _propTypes.default.object,

  /**
   * @ignore
   */
  className: _propTypes.default.string,

  /**
   * The position where the timeline's item should appear.
   */
  position: _propTypes.default.oneOf(['left', 'right']),

  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: _propTypes.default.object
} : void 0;
var _default = TimelineItem;
exports.default = _default;