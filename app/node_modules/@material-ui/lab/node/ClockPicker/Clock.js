"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _styles = require("@material-ui/core/styles");

var _ClockPointer = _interopRequireDefault(require("./ClockPointer"));

var _useUtils = require("../internal/pickers/hooks/useUtils");

var _useKeyDown = require("../internal/pickers/hooks/useKeyDown");

var _WrapperVariantContext = require("../internal/pickers/wrappers/WrapperVariantContext");

var _shared = require("./shared");

var _jsxRuntime = require("react/jsx-runtime");

const ClockRoot = (0, _styles.experimentalStyled)('div', {}, {
  skipSx: true
})(({
  theme
}) => ({
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
  margin: theme.spacing(2)
}));
const ClockClock = (0, _styles.experimentalStyled)('div', {}, {
  skipSx: true
})({
  backgroundColor: 'rgba(0,0,0,.07)',
  borderRadius: '50%',
  height: 220,
  width: 220,
  flexShrink: 0,
  position: 'relative',
  pointerEvents: 'none'
});
const ClockSquareMask = (0, _styles.experimentalStyled)('div', {}, {
  skipSx: true
})({
  width: '100%',
  height: '100%',
  position: 'absolute',
  pointerEvents: 'auto',
  outline: 0,
  // Disable scroll capabilities.
  touchAction: 'none',
  userSelect: 'none',
  '@media (pointer: fine)': {
    cursor: 'pointer',
    borderRadius: '50%'
  },
  '&:active': {
    cursor: 'move'
  }
});
const ClockPin = (0, _styles.experimentalStyled)('div', {}, {
  skipSx: true
})(({
  theme
}) => ({
  width: 6,
  height: 6,
  borderRadius: '50%',
  backgroundColor: theme.palette.primary.main,
  position: 'absolute',
  top: '50%',
  left: '50%',
  transform: 'translate(-50%, -50%)'
}));
const ClockAmButton = (0, _styles.experimentalStyled)(_IconButton.default, {}, {
  skipSx: true
})(({
  theme,
  styleProps = {}
}) => (0, _extends2.default)({
  zIndex: 1,
  position: 'absolute',
  bottom: 8,
  left: 8
}, styleProps.meridiemMode === 'am' && {
  backgroundColor: theme.palette.primary.main,
  color: theme.palette.primary.contrastText,
  '&:hover': {
    backgroundColor: theme.palette.primary.light
  }
}));
const ClockPmButton = (0, _styles.experimentalStyled)(_IconButton.default, {}, {
  skipSx: true
})(({
  theme,
  styleProps = {}
}) => (0, _extends2.default)({
  zIndex: 1,
  position: 'absolute',
  bottom: 8,
  right: 8
}, styleProps.meridiemMode === 'pm' && {
  backgroundColor: theme.palette.primary.main,
  color: theme.palette.primary.contrastText,
  '&:hover': {
    backgroundColor: theme.palette.primary.light
  }
}));
/**
 * @ignore - internal component.
 */

var _ref = /*#__PURE__*/(0, _jsxRuntime.jsx)(ClockPin, {});

var _ref2 = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Typography.default, {
  variant: "caption",
  children: "AM"
});

var _ref3 = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Typography.default, {
  variant: "caption",
  children: "PM"
});

function Clock(props) {
  const {
    allowKeyboardControl,
    ampm,
    ampmInClock,
    children: numbersElementsArray,
    date,
    getClockLabelText,
    handleMeridiemChange,
    isTimeDisabled,
    meridiemMode,
    minutesStep = 1,
    onChange,
    type,
    value
  } = props; // TODO: convert to simple assignment after the type error in defaultPropsHandler.js:60:6 is fixed

  const styleProps = (0, _extends2.default)({}, props);
  const utils = (0, _useUtils.useUtils)();
  const isStatic = React.useContext(_WrapperVariantContext.IsStaticVariantContext);
  const wrapperVariant = React.useContext(_WrapperVariantContext.WrapperVariantContext);
  const isMoving = React.useRef(false);
  const isSelectedTimeDisabled = isTimeDisabled(value, type);
  const isPointerInner = !ampm && type === 'hours' && (value < 1 || value > 12);

  const handleValueChange = (newValue, isFinish) => {
    if (isTimeDisabled(newValue, type)) {
      return;
    }

    onChange(newValue, isFinish);
  };

  const setTime = (event, isFinish) => {
    let {
      offsetX,
      offsetY
    } = event;

    if (typeof offsetX === 'undefined') {
      const rect = event.target.getBoundingClientRect();
      offsetX = event.changedTouches[0].clientX - rect.left;
      offsetY = event.changedTouches[0].clientY - rect.top;
    }

    const newSelectedValue = type === 'seconds' || type === 'minutes' ? (0, _shared.getMinutes)(offsetX, offsetY, minutesStep) : (0, _shared.getHours)(offsetX, offsetY, Boolean(ampm));
    handleValueChange(newSelectedValue, isFinish);
  };

  const handleTouchMove = event => {
    isMoving.current = true;
    setTime(event, 'shallow');
  };

  const handleTouchEnd = event => {
    if (isMoving.current) {
      setTime(event, 'finish');
      isMoving.current = false;
    }
  };

  const handleMouseMove = event => {
    event.preventDefault();
    event.stopPropagation(); // MouseEvent.which is deprecated, but MouseEvent.buttons is not supported in Safari

    const isButtonPressed = // tslint:disable-next-line deprecation
    typeof event.buttons === 'undefined' ? event.nativeEvent.which === 1 : event.buttons === 1;

    if (isButtonPressed) {
      setTime(event.nativeEvent, 'shallow');
    }
  };

  const handleMouseUp = event => {
    if (isMoving.current) {
      isMoving.current = false;
    }

    setTime(event.nativeEvent, 'finish');
  };

  const hasSelected = React.useMemo(() => {
    if (type === 'hours') {
      return true;
    }

    return value % 5 === 0;
  }, [type, value]);
  const keyboardControlStep = type === 'minutes' ? minutesStep : 1;
  (0, _useKeyDown.useGlobalKeyDown)(Boolean(allowKeyboardControl !== null && allowKeyboardControl !== void 0 ? allowKeyboardControl : !isStatic) && !isMoving.current, {
    [_useKeyDown.keycode.Home]: () => handleValueChange(0, 'partial'),
    // annulate both hours and minutes
    [_useKeyDown.keycode.End]: () => handleValueChange(type === 'minutes' ? 59 : 23, 'partial'),
    [_useKeyDown.keycode.ArrowUp]: () => handleValueChange(value + keyboardControlStep, 'partial'),
    [_useKeyDown.keycode.ArrowDown]: () => handleValueChange(value - keyboardControlStep, 'partial')
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(ClockRoot, {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(ClockClock, {
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(ClockSquareMask, {
        role: "menu",
        tabIndex: 0,
        onTouchMove: handleTouchMove,
        onTouchEnd: handleTouchEnd,
        onMouseUp: handleMouseUp,
        onMouseMove: handleMouseMove
      }), !isSelectedTimeDisabled && /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {
        children: [_ref, date && /*#__PURE__*/(0, _jsxRuntime.jsx)(_ClockPointer.default, {
          type: type,
          value: value,
          isInner: isPointerInner,
          hasSelected: hasSelected,
          "aria-live": "polite",
          "aria-label": getClockLabelText(type, date, utils)
        })]
      }), numbersElementsArray]
    }), ampm && (wrapperVariant === 'desktop' || ampmInClock) && /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(ClockAmButton, {
        onClick: () => handleMeridiemChange('am'),
        disabled: meridiemMode === null,
        styleProps: styleProps,
        children: _ref2
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(ClockPmButton, {
        disabled: meridiemMode === null,
        onClick: () => handleMeridiemChange('pm'),
        styleProps: styleProps,
        children: _ref3
      })]
    })]
  });
}

var _default = Clock;
exports.default = _default;