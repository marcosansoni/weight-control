"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDateTimePickerDefaultizedProps = useDateTimePickerDefaultizedProps;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _styles = require("@material-ui/core/styles");

var _useUtils = require("../internal/pickers/hooks/useUtils");

var _textFieldHelper = require("../internal/pickers/text-field-helper");

var _dateHelpersHooks = require("../internal/pickers/hooks/date-helpers-hooks");

var _propTypes = require("../internal/pickers/constants/prop-types");

function useDateTimePickerDefaultizedProps(_ref, name) {
  let {
    ampm,
    inputFormat,
    maxDate: __maxDate = _propTypes.defaultMaxDate,
    maxDateTime: __maxDateTime,
    maxTime: __maxTime,
    minDate: __minDate = _propTypes.defaultMinDate,
    minDateTime: __minDateTime,
    minTime: __minTime,
    openTo = 'day',
    orientation = 'portrait',
    views = ['year', 'day', 'hours', 'minutes']
  } = _ref,
      other = (0, _objectWithoutPropertiesLoose2.default)(_ref, ["ampm", "inputFormat", "maxDate", "maxDateTime", "maxTime", "minDate", "minDateTime", "minTime", "openTo", "orientation", "views"]);
  const utils = (0, _useUtils.useUtils)();
  const minTime = (0, _dateHelpersHooks.useParsedDate)(__minTime);
  const maxTime = (0, _dateHelpersHooks.useParsedDate)(__maxTime);
  const minDate = (0, _dateHelpersHooks.useParsedDate)(__minDate);
  const maxDate = (0, _dateHelpersHooks.useParsedDate)(__maxDate);
  const minDateTime = (0, _dateHelpersHooks.useParsedDate)(__minDateTime);
  const maxDateTime = (0, _dateHelpersHooks.useParsedDate)(__maxDateTime);
  const willUseAmPm = ampm !== null && ampm !== void 0 ? ampm : utils.is12HourCycleInCurrentLocale();

  if (orientation !== 'portrait') {
    throw new Error('We are not supporting custom orientation for DateTimePicker yet :(');
  }

  return (0, _styles.unstable_useThemeProps)({
    props: (0, _extends2.default)({
      openTo,
      views,
      ampm: willUseAmPm,
      ampmInClock: true,
      orientation,
      showToolbar: true,
      allowSameDateSelection: true,
      minDate: minDateTime || minDate,
      minTime: minDateTime || minTime,
      maxDate: maxDateTime || maxDate,
      maxTime: maxDateTime || maxTime,
      disableIgnoringDatePartForTimeValidation: Boolean(minDateTime || maxDateTime),
      acceptRegex: willUseAmPm ? /[\dap]/gi : /\d/gi,
      mask: '__/__/____ __:__',
      disableMaskedInput: willUseAmPm,
      inputFormat: (0, _textFieldHelper.pick12hOr24hFormat)(inputFormat, willUseAmPm, {
        localized: utils.formats.keyboardDateTime,
        '12h': utils.formats.keyboardDateTime12h,
        '24h': utils.formats.keyboardDateTime24h
      })
    }, other),
    name
  });
}