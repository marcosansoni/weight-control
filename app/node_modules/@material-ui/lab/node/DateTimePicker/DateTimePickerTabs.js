"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _Tab = _interopRequireDefault(require("@material-ui/core/Tab"));

var _Tabs = _interopRequireDefault(require("@material-ui/core/Tabs"));

var _Paper = _interopRequireDefault(require("@material-ui/core/Paper"));

var _styles = require("@material-ui/core/styles");

var _Time = _interopRequireDefault(require("../internal/svg-icons/Time"));

var _DateRange = _interopRequireDefault(require("../internal/svg-icons/DateRange"));

var _WrapperVariantContext = require("../internal/pickers/wrappers/WrapperVariantContext");

var _jsxRuntime = require("react/jsx-runtime");

const viewToTab = openView => {
  // TODO: what happens if `openView` is `month`?
  if (openView === 'day' || openView === 'year') {
    return 'date';
  }

  return 'time';
};

const tabToView = tab => {
  if (tab === 'date') {
    return 'day';
  }

  return 'hours';
};

const DateTimePickerTabsRoot = (0, _styles.experimentalStyled)(_Paper.default, {}, {
  skipSx: true
})(({
  styleProps = {}
}) => (0, _extends2.default)({}, styleProps.wrapperVariant === 'desktop' && {
  order: 1
}));
const DateTimePickerTabsTabs = (0, _styles.experimentalStyled)(_Tabs.default, {}, {
  skipSx: true
})(({
  theme
}) => {
  const tabsBackground = theme.palette.mode === 'light' ? theme.palette.primary.main : theme.palette.background.default;
  return {
    color: theme.palette.getContrastText(tabsBackground),
    backgroundColor: tabsBackground
  };
});
/**
 * @ignore - internal component.
 */

var _ref = /*#__PURE__*/(0, _jsxRuntime.jsx)(_DateRange.default, {});

var _ref2 = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Time.default, {});

const DateTimePickerTabs = props => {
  const {
    dateRangeIcon = _ref,
    onChange,
    timeIcon = _ref2,
    view
  } = props;
  const theme = (0, _styles.useTheme)();
  const wrapperVariant = React.useContext(_WrapperVariantContext.WrapperVariantContext);
  const indicatorColor = theme.palette.mode === 'light' ? 'secondary' : 'primary';
  const styleProps = (0, _extends2.default)({}, props, {
    wrapperVariant
  });

  const handleChange = (event, value) => {
    onChange(tabToView(value));
  };

  return /*#__PURE__*/(0, _jsxRuntime.jsx)(DateTimePickerTabsRoot, {
    styleProps: styleProps,
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(DateTimePickerTabsTabs, {
      variant: "fullWidth",
      value: viewToTab(view),
      onChange: handleChange,
      indicatorColor: indicatorColor,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Tab.default, {
        value: "date",
        "aria-label": "pick date",
        icon: /*#__PURE__*/(0, _jsxRuntime.jsx)(React.Fragment, {
          children: dateRangeIcon
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Tab.default, {
        value: "time",
        "aria-label": "pick time",
        icon: /*#__PURE__*/(0, _jsxRuntime.jsx)(React.Fragment, {
          children: timeIcon
        })
      })]
    })
  });
};

var _default = DateTimePickerTabs;
exports.default = _default;