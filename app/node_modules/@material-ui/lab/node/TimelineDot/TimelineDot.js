"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _clsx = _interopRequireDefault(require("clsx"));

var _styles = require("@material-ui/core/styles");

var _utils = require("@material-ui/core/utils");

var _unstyled = require("@material-ui/unstyled");

var _timelineDotClasses = require("./timelineDotClasses");

var _jsxRuntime = require("react/jsx-runtime");

const useUtilityClasses = styleProps => {
  const {
    color,
    variant,
    classes
  } = styleProps;
  const slots = {
    root: ['root', variant, color !== 'inherit' && `${variant}${(0, _utils.capitalize)(color)}`]
  };
  return (0, _unstyled.unstable_composeClasses)(slots, _timelineDotClasses.getTimelineDotUtilityClass, classes);
};

const TimelineDotRoot = (0, _styles.experimentalStyled)('span', {}, {
  name: 'MuiTimelineDot',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      styleProps
    } = props;
    return (0, _extends2.default)({}, styles.root, styles[styleProps.color !== 'inherit' && `${styleProps.variant}${(0, _utils.capitalize)(styleProps.color)}`], styles[styleProps.variant]);
  }
})(({
  styleProps,
  theme
}) => (0, _extends2.default)({
  /* Styles applied to the root element. */
  display: 'flex',
  alignSelf: 'baseline',
  borderStyle: 'solid',
  borderWidth: 2,
  padding: 4,
  borderRadius: '50%',
  boxShadow: theme.shadows[1],
  margin: '11.5px 0'
}, styleProps.color === 'grey' && styleProps.variant === 'filled' && {
  borderColor: 'transparent',
  color: theme.palette.grey[50],
  backgroundColor: theme.palette.grey[400]
}, styleProps.color === 'grey' && styleProps.variant === 'outlined' && {
  boxShadow: 'none',
  color: theme.palette.grey.contrastText,
  borderColor: theme.palette.grey[400],
  backgroundColor: 'transparent'
}, styleProps.color === 'primary' && styleProps.variant === 'filled' && {
  borderColor: 'transparent',
  color: theme.palette.primary.contrastText,
  backgroundColor: theme.palette.primary.main
}, styleProps.color === 'primary' && styleProps.variant === 'outlined' && {
  boxShadow: 'none',
  backgroundColor: 'transparent',
  borderColor: theme.palette.primary.main
}, styleProps.color === 'secondary' && styleProps.variant === 'filled' && {
  borderColor: 'transparent',
  color: theme.palette.secondary.contrastText,
  backgroundColor: theme.palette.secondary.main
}, styleProps.color === 'secondary' && styleProps.variant === 'outlined' && {
  boxShadow: 'none',
  backgroundColor: 'transparent',
  borderColor: theme.palette.secondary.main
}));
const TimelineDot = /*#__PURE__*/React.forwardRef(function TimelineDot(inProps, ref) {
  const props = (0, _styles.unstable_useThemeProps)({
    props: inProps,
    name: 'MuiTimelineDot'
  });
  const {
    className,
    color = 'grey',
    variant = 'filled'
  } = props,
        other = (0, _objectWithoutPropertiesLoose2.default)(props, ["className", "color", "variant"]);
  const styleProps = (0, _extends2.default)({}, props, {
    color,
    variant
  });
  const classes = useUtilityClasses(styleProps);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(TimelineDotRoot, (0, _extends2.default)({
    className: (0, _clsx.default)(classes.root, className),
    styleProps: styleProps,
    ref: ref
  }, other));
});
process.env.NODE_ENV !== "production" ? TimelineDot.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * The content of the component.
   */
  children: _propTypes.default.node,

  /**
   * Override or extend the styles applied to the component.
   */
  classes: _propTypes.default.object,

  /**
   * @ignore
   */
  className: _propTypes.default.string,

  /**
   * The dot can have a different colors.
   * @default 'grey'
   */
  color: _propTypes.default.oneOf(['grey', 'inherit', 'primary', 'secondary']),

  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: _propTypes.default.object,

  /**
   * The dot can appear filled or outlined.
   * @default 'filled'
   */
  variant: _propTypes.default
  /* @typescript-to-proptypes-ignore */
  .oneOfType([_propTypes.default.oneOf(['filled', 'outlined']), _propTypes.default.string])
} : void 0;
var _default = TimelineDot;
exports.default = _default;