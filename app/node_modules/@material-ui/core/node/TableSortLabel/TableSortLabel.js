"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _unstyled = require("@material-ui/unstyled");

var _clsx = _interopRequireDefault(require("clsx"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _ButtonBase = _interopRequireDefault(require("../ButtonBase"));

var _ArrowDownward = _interopRequireDefault(require("../internal/svg-icons/ArrowDownward"));

var _experimentalStyled = _interopRequireDefault(require("../styles/experimentalStyled"));

var _useThemeProps = _interopRequireDefault(require("../styles/useThemeProps"));

var _capitalize = _interopRequireDefault(require("../utils/capitalize"));

var _tableSortLabelClasses = _interopRequireWildcard(require("./tableSortLabelClasses"));

var _jsxRuntime = require("react/jsx-runtime");

const useUtilityClasses = styleProps => {
  const {
    classes,
    direction,
    active
  } = styleProps;
  const slots = {
    root: ['root', active && 'active'],
    icon: ['icon', `iconDirection${(0, _capitalize.default)(direction)}`]
  };
  return (0, _unstyled.unstable_composeClasses)(slots, _tableSortLabelClasses.getTableSortLabelUtilityClass, classes);
};

const TableSortLabelRoot = (0, _experimentalStyled.default)(_ButtonBase.default, {}, {
  name: 'MuiTableSortLabel',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      styleProps
    } = props;
    return (0, _extends2.default)({}, styles.root, styleProps.active && styles.active);
  }
})(({
  theme
}) => ({
  /* Styles applied to the root element. */
  cursor: 'pointer',
  display: 'inline-flex',
  justifyContent: 'flex-start',
  flexDirection: 'inherit',
  alignItems: 'center',
  '&:focus': {
    color: theme.palette.text.secondary
  },
  '&:hover': {
    color: theme.palette.text.secondary,
    [`& .${_tableSortLabelClasses.default.icon}`]: {
      opacity: 0.5
    }
  },
  [`&.${_tableSortLabelClasses.default.active}`]: {
    color: theme.palette.text.primary,
    [`& .${_tableSortLabelClasses.default.icon}`]: {
      opacity: 1,
      color: theme.palette.text.secondary
    }
  }
}));
const TableSortLabelIcon = (0, _experimentalStyled.default)('span', {}, {
  name: 'MuiTableSortLabel',
  slot: 'Icon',
  overridesResolver: (props, styles) => {
    const {
      styleProps
    } = props;
    return (0, _extends2.default)({}, styles.icon, styles[`iconDirection${(0, _capitalize.default)(styleProps.direction)}`]);
  }
})(({
  theme,
  styleProps
}) => (0, _extends2.default)({
  /* Styles applied to the icon component. */
  fontSize: 18,
  marginRight: 4,
  marginLeft: 4,
  opacity: 0,
  transition: theme.transitions.create(['opacity', 'transform'], {
    duration: theme.transitions.duration.shorter
  }),
  userSelect: 'none'
}, styleProps.direction === 'desc' && {
  transform: 'rotate(0deg)'
}, styleProps.direction === 'asc' && {
  transform: 'rotate(180deg)'
}));
/**
 * A button based label for placing inside `TableCell` for column sorting.
 */

const TableSortLabel = /*#__PURE__*/React.forwardRef(function TableSortLabel(inProps, ref) {
  const props = (0, _useThemeProps.default)({
    props: inProps,
    name: 'MuiTableSortLabel'
  });
  const {
    active = false,
    children,
    className,
    direction = 'asc',
    hideSortIcon = false,
    IconComponent = _ArrowDownward.default
  } = props,
        other = (0, _objectWithoutPropertiesLoose2.default)(props, ["active", "children", "className", "direction", "hideSortIcon", "IconComponent"]);
  const styleProps = (0, _extends2.default)({}, props, {
    active,
    direction,
    hideSortIcon,
    IconComponent
  });
  const classes = useUtilityClasses(styleProps);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(TableSortLabelRoot, (0, _extends2.default)({
    className: (0, _clsx.default)(classes.root, className),
    component: "span",
    disableRipple: true,
    styleProps: styleProps,
    ref: ref
  }, other, {
    children: [children, hideSortIcon && !active ? null : /*#__PURE__*/(0, _jsxRuntime.jsx)(TableSortLabelIcon, {
      as: IconComponent,
      className: (0, _clsx.default)(classes.icon),
      styleProps: styleProps
    })]
  }));
});
process.env.NODE_ENV !== "production" ? TableSortLabel.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * If `true`, the label will have the active styling (should be true for the sorted column).
   * @default false
   */
  active: _propTypes.default.bool,

  /**
   * Label contents, the arrow will be appended automatically.
   */
  children: _propTypes.default.node,

  /**
   * Override or extend the styles applied to the component.
   */
  classes: _propTypes.default.object,

  /**
   * @ignore
   */
  className: _propTypes.default.string,

  /**
   * The current sort direction.
   * @default 'asc'
   */
  direction: _propTypes.default.oneOf(['asc', 'desc']),

  /**
   * Hide sort icon when active is false.
   * @default false
   */
  hideSortIcon: _propTypes.default.bool,

  /**
   * Sort icon to use.
   * @default ArrowDownwardIcon
   */
  IconComponent: _propTypes.default.elementType,

  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: _propTypes.default.object
} : void 0;
var _default = TableSortLabel;
exports.default = _default;