{"ast":null,"code":"/* eslint-disable @typescript-eslint/naming-convention, consistent-return, jsx-a11y/no-noninteractive-tabindex */\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp, elementAcceptingRef, unstable_useForkRef as useForkRef, unstable_ownerDocument as ownerDocument } from '@material-ui/utils'; // Inspired by https://github.com/focus-trap/tabbable\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst candidatesSelector = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable=\"false\"])'].join(',');\n\nfunction getTabIndex(node) {\n  const tabindexAttr = parseInt(node.getAttribute('tabindex'), 10);\n\n  if (!Number.isNaN(tabindexAttr)) {\n    return tabindexAttr;\n  } // Browsers do not return `tabIndex` correctly for contentEditable nodes;\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=661108&q=contenteditable%20tabindex&can=2\n  // so if they don't have a tabindex attribute specifically set, assume it's 0.\n  // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n  //  `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n  //  yet they are still part of the regular tab order; in FF, they get a default\n  //  `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n  //  order, consider their tab index to be 0.\n\n\n  if (node.contentEditable === 'true' || (node.nodeName === 'AUDIO' || node.nodeName === 'VIDEO' || node.nodeName === 'DETAILS') && node.getAttribute('tabindex') === null) {\n    return 0;\n  }\n\n  return node.tabIndex;\n}\n\nfunction isNonTabbableRadio(node) {\n  if (node.tagName !== 'INPUT' || node.type !== 'radio') {\n    return false;\n  }\n\n  if (!node.name) {\n    return false;\n  }\n\n  const getRadio = selector => node.ownerDocument.querySelector(`input[type=\"radio\"]${selector}`);\n\n  let roving = getRadio(`[name=\"${node.name}\"]:checked`);\n\n  if (!roving) {\n    roving = getRadio(`[name=\"${node.name}\"]`);\n  }\n\n  return roving !== node;\n}\n\nfunction isNodeMatchingSelectorFocusable(node) {\n  if (node.disabled || node.tagName === 'INPUT' && node.type === 'hidden' || isNonTabbableRadio(node)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction defaultGetTabbable(root) {\n  const regularTabNodes = [];\n  const orderedTabNodes = [];\n  Array.from(root.querySelectorAll(candidatesSelector)).forEach((node, i) => {\n    const nodeTabIndex = getTabIndex(node);\n\n    if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node)) {\n      return;\n    }\n\n    if (nodeTabIndex === 0) {\n      regularTabNodes.push(node);\n    } else {\n      orderedTabNodes.push({\n        documentOrder: i,\n        tabIndex: nodeTabIndex,\n        node\n      });\n    }\n  });\n  return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map(a => a.node).concat(regularTabNodes);\n}\n\nfunction defaultGetDoc() {\n  return document;\n}\n\nfunction defaultIsEnabled() {\n  return true;\n}\n/**\n * Utility component that locks focus inside the component.\n */\n\n\nfunction Unstable_TrapFocus(props) {\n  const {\n    children,\n    disableAutoFocus = false,\n    disableEnforceFocus = false,\n    disableRestoreFocus = false,\n    getDoc = defaultGetDoc,\n    getTabbable = defaultGetTabbable,\n    isEnabled = defaultIsEnabled,\n    open\n  } = props;\n  const ignoreNextEnforceFocus = React.useRef();\n  const sentinelStart = React.useRef(null);\n  const sentinelEnd = React.useRef(null);\n  const nodeToRestore = React.useRef();\n  const reactFocusEventTarget = React.useRef(null); // This variable is useful when disableAutoFocus is true.\n  // It waits for the active element to move into the component to activate.\n\n  const activated = React.useRef(false);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(children.ref, rootRef);\n  const lastKeydown = React.useRef(null);\n  const prevOpenRef = React.useRef();\n  React.useEffect(() => {\n    prevOpenRef.current = open;\n  }, [open]);\n\n  if (!prevOpenRef.current && open && typeof window !== 'undefined' && !disableAutoFocus) {\n    // WARNING: Potentially unsafe in concurrent mode.\n    // The way the read on `nodeToRestore` is setup could make this actually safe.\n    // Say we render `open={false}` -> `open={true}` but never commit.\n    // We have now written a state that wasn't committed. But no committed effect\n    // will read this wrong value. We only read from `nodeToRestore` in effects\n    // that were committed on `open={true}`\n    // WARNING: Prevents the instance from being garbage collected. Should only\n    // hold a weak ref.\n    nodeToRestore.current = getDoc().activeElement;\n  }\n\n  React.useEffect(() => {\n    // We might render an empty child.\n    if (!open || !rootRef.current) {\n      return;\n    }\n\n    activated.current = !disableAutoFocus;\n  }, [disableAutoFocus, open]);\n  React.useEffect(() => {\n    // We might render an empty child.\n    if (!open || !rootRef.current) {\n      return;\n    }\n\n    const doc = ownerDocument(rootRef.current);\n\n    if (!rootRef.current.contains(doc.activeElement)) {\n      if (!rootRef.current.hasAttribute('tabIndex')) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(['Material-UI: The modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to \"-1\".'].join('\\n'));\n        }\n\n        rootRef.current.setAttribute('tabIndex', -1);\n      }\n\n      if (activated.current) {\n        rootRef.current.focus();\n      }\n    }\n\n    return () => {\n      // restoreLastFocus()\n      if (!disableRestoreFocus) {\n        // In IE11 it is possible for document.activeElement to be null resulting\n        // in nodeToRestore.current being null.\n        // Not all elements in IE11 have a focus method.\n        // Once IE11 support is dropped the focus() call can be unconditional.\n        if (nodeToRestore.current && nodeToRestore.current.focus) {\n          ignoreNextEnforceFocus.current = true;\n          nodeToRestore.current.focus();\n        }\n\n        nodeToRestore.current = null;\n      }\n    }; // Missing `disableRestoreFocus` which is fine.\n    // We don't support changing that prop on an open TrapFocus\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open]);\n  React.useEffect(() => {\n    // We might render an empty child.\n    if (!open || !rootRef.current) {\n      return;\n    }\n\n    const doc = ownerDocument(rootRef.current);\n\n    const contain = nativeEvent => {\n      const {\n        current: rootElement\n      } = rootRef; // Cleanup functions are executed lazily in React 17.\n      // Contain can be called between the component being unmounted and its cleanup function being run.\n\n      if (rootElement === null) {\n        return;\n      }\n\n      if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {\n        ignoreNextEnforceFocus.current = false;\n        return;\n      }\n\n      if (!rootElement.contains(doc.activeElement)) {\n        // if the focus event is not coming from inside the children's react tree, reset the refs\n        if (nativeEvent && reactFocusEventTarget.current !== nativeEvent.target || doc.activeElement !== reactFocusEventTarget.current) {\n          reactFocusEventTarget.current = null;\n        } else if (reactFocusEventTarget.current !== null) {\n          return;\n        }\n\n        if (!activated.current) {\n          return;\n        }\n\n        let tabbable = [];\n\n        if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {\n          tabbable = getTabbable(rootRef.current);\n        }\n\n        if (tabbable.length > 0) {\n          var _lastKeydown$current, _lastKeydown$current2;\n\n          const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) === null || _lastKeydown$current === void 0 ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) === null || _lastKeydown$current2 === void 0 ? void 0 : _lastKeydown$current2.key) === 'Tab');\n          const focusNext = tabbable[0];\n          const focusPrevious = tabbable[tabbable.length - 1];\n\n          if (isShiftTab) {\n            focusPrevious.focus();\n          } else {\n            focusNext.focus();\n          }\n        } else {\n          rootElement.focus();\n        }\n      }\n    };\n\n    const loopFocus = nativeEvent => {\n      lastKeydown.current = nativeEvent;\n\n      if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== 'Tab') {\n        return;\n      } // Make sure the next tab starts from the right place.\n      // doc.activeElement referes to the origin.\n\n\n      if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {\n        // We need to ignore the next contain as\n        // it will try to move the focus back to the rootRef element.\n        ignoreNextEnforceFocus.current = true;\n        sentinelEnd.current.focus();\n      }\n    };\n\n    doc.addEventListener('focusin', contain);\n    doc.addEventListener('keydown', loopFocus, true); // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area.\n    // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.\n    // Instead, we can look if the active element was restored on the BODY element.\n    //\n    // The whatwg spec defines how the browser should behave but does not explicitly mention any events:\n    // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.\n\n    const interval = setInterval(() => {\n      if (doc.activeElement.tagName === 'BODY') {\n        contain();\n      }\n    }, 50);\n    return () => {\n      clearInterval(interval);\n      doc.removeEventListener('focusin', contain);\n      doc.removeEventListener('keydown', loopFocus, true);\n    };\n  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);\n\n  const onFocus = event => {\n    if (!activated.current) {\n      nodeToRestore.current = event.relatedTarget;\n    }\n\n    activated.current = true;\n    reactFocusEventTarget.current = event.target;\n    const childrenPropsHandler = children.props.onFocus;\n\n    if (childrenPropsHandler) {\n      childrenPropsHandler(event);\n    }\n  };\n\n  const handleFocusSentinel = event => {\n    if (!activated.current) {\n      nodeToRestore.current = event.relatedTarget;\n    }\n\n    activated.current = true;\n  };\n\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      tabIndex: 0,\n      onFocus: handleFocusSentinel,\n      ref: sentinelStart,\n      \"data-test\": \"sentinelStart\"\n    }), /*#__PURE__*/React.cloneElement(children, {\n      ref: handleRef,\n      onFocus\n    }), /*#__PURE__*/_jsx(\"div\", {\n      tabIndex: 0,\n      onFocus: handleFocusSentinel,\n      ref: sentinelEnd,\n      \"data-test\": \"sentinelEnd\"\n    })]\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Unstable_TrapFocus.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * A single child content element.\n   */\n  children: elementAcceptingRef,\n\n  /**\n   * If `true`, the trap focus will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any trap focus children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the trap focus less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableAutoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the trap focus will not prevent focus from leaving the trap focus while open.\n   *\n   * Generally this should never be set to `true` as it makes the trap focus less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableEnforceFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the trap focus will not restore focus to previously focused element once\n   * trap focus is hidden.\n   * @default false\n   */\n  disableRestoreFocus: PropTypes.bool,\n\n  /**\n   * Return the document the trap focus is mounted into.\n   * Provide the prop if you need the restore focus to work between different documents.\n   * @default function defaultGetDoc() {\n   *   return document;\n   * }\n   */\n  getDoc: PropTypes.func,\n\n  /**\n   * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.\n   * For instance, you can provide the \"tabbable\" npm dependency.\n   * @param {HTMLElement} root\n   */\n  getTabbable: PropTypes.func,\n\n  /**\n   * This prop extends the `open` prop.\n   * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.\n   * This prop should be memoized.\n   * It can be used to support multiple trap focus mounted at the same time.\n   * @default function defaultIsEnabled() {\n   *   return true;\n   * }\n   */\n  isEnabled: PropTypes.func,\n\n  /**\n   * If `true`, focus is locked.\n   */\n  open: PropTypes.bool.isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Unstable_TrapFocus['propTypes' + ''] = exactProp(Unstable_TrapFocus.propTypes);\n}\n\nexport default Unstable_TrapFocus;","map":{"version":3,"sources":["C:/Progetti/weight-control/app/node_modules/@material-ui/unstyled/Unstable_TrapFocus/Unstable_TrapFocus.js"],"names":["React","PropTypes","exactProp","elementAcceptingRef","unstable_useForkRef","useForkRef","unstable_ownerDocument","ownerDocument","jsx","_jsx","jsxs","_jsxs","candidatesSelector","join","getTabIndex","node","tabindexAttr","parseInt","getAttribute","Number","isNaN","contentEditable","nodeName","tabIndex","isNonTabbableRadio","tagName","type","name","getRadio","selector","querySelector","roving","isNodeMatchingSelectorFocusable","disabled","defaultGetTabbable","root","regularTabNodes","orderedTabNodes","Array","from","querySelectorAll","forEach","i","nodeTabIndex","push","documentOrder","sort","a","b","map","concat","defaultGetDoc","document","defaultIsEnabled","Unstable_TrapFocus","props","children","disableAutoFocus","disableEnforceFocus","disableRestoreFocus","getDoc","getTabbable","isEnabled","open","ignoreNextEnforceFocus","useRef","sentinelStart","sentinelEnd","nodeToRestore","reactFocusEventTarget","activated","rootRef","handleRef","ref","lastKeydown","prevOpenRef","useEffect","current","window","activeElement","doc","contains","hasAttribute","process","env","NODE_ENV","console","error","setAttribute","focus","contain","nativeEvent","rootElement","hasFocus","target","tabbable","length","_lastKeydown$current","_lastKeydown$current2","isShiftTab","Boolean","shiftKey","key","focusNext","focusPrevious","loopFocus","addEventListener","interval","setInterval","clearInterval","removeEventListener","onFocus","event","relatedTarget","childrenPropsHandler","handleFocusSentinel","Fragment","cloneElement","propTypes","bool","func","isRequired"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention, consistent-return, jsx-a11y/no-noninteractive-tabindex */\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp, elementAcceptingRef, unstable_useForkRef as useForkRef, unstable_ownerDocument as ownerDocument } from '@material-ui/utils'; // Inspired by https://github.com/focus-trap/tabbable\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst candidatesSelector = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable=\"false\"])'].join(',');\n\nfunction getTabIndex(node) {\n  const tabindexAttr = parseInt(node.getAttribute('tabindex'), 10);\n\n  if (!Number.isNaN(tabindexAttr)) {\n    return tabindexAttr;\n  } // Browsers do not return `tabIndex` correctly for contentEditable nodes;\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=661108&q=contenteditable%20tabindex&can=2\n  // so if they don't have a tabindex attribute specifically set, assume it's 0.\n  // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n  //  `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n  //  yet they are still part of the regular tab order; in FF, they get a default\n  //  `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n  //  order, consider their tab index to be 0.\n\n\n  if (node.contentEditable === 'true' || (node.nodeName === 'AUDIO' || node.nodeName === 'VIDEO' || node.nodeName === 'DETAILS') && node.getAttribute('tabindex') === null) {\n    return 0;\n  }\n\n  return node.tabIndex;\n}\n\nfunction isNonTabbableRadio(node) {\n  if (node.tagName !== 'INPUT' || node.type !== 'radio') {\n    return false;\n  }\n\n  if (!node.name) {\n    return false;\n  }\n\n  const getRadio = selector => node.ownerDocument.querySelector(`input[type=\"radio\"]${selector}`);\n\n  let roving = getRadio(`[name=\"${node.name}\"]:checked`);\n\n  if (!roving) {\n    roving = getRadio(`[name=\"${node.name}\"]`);\n  }\n\n  return roving !== node;\n}\n\nfunction isNodeMatchingSelectorFocusable(node) {\n  if (node.disabled || node.tagName === 'INPUT' && node.type === 'hidden' || isNonTabbableRadio(node)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction defaultGetTabbable(root) {\n  const regularTabNodes = [];\n  const orderedTabNodes = [];\n  Array.from(root.querySelectorAll(candidatesSelector)).forEach((node, i) => {\n    const nodeTabIndex = getTabIndex(node);\n\n    if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node)) {\n      return;\n    }\n\n    if (nodeTabIndex === 0) {\n      regularTabNodes.push(node);\n    } else {\n      orderedTabNodes.push({\n        documentOrder: i,\n        tabIndex: nodeTabIndex,\n        node\n      });\n    }\n  });\n  return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map(a => a.node).concat(regularTabNodes);\n}\n\nfunction defaultGetDoc() {\n  return document;\n}\n\nfunction defaultIsEnabled() {\n  return true;\n}\n/**\n * Utility component that locks focus inside the component.\n */\n\n\nfunction Unstable_TrapFocus(props) {\n  const {\n    children,\n    disableAutoFocus = false,\n    disableEnforceFocus = false,\n    disableRestoreFocus = false,\n    getDoc = defaultGetDoc,\n    getTabbable = defaultGetTabbable,\n    isEnabled = defaultIsEnabled,\n    open\n  } = props;\n  const ignoreNextEnforceFocus = React.useRef();\n  const sentinelStart = React.useRef(null);\n  const sentinelEnd = React.useRef(null);\n  const nodeToRestore = React.useRef();\n  const reactFocusEventTarget = React.useRef(null); // This variable is useful when disableAutoFocus is true.\n  // It waits for the active element to move into the component to activate.\n\n  const activated = React.useRef(false);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(children.ref, rootRef);\n  const lastKeydown = React.useRef(null);\n  const prevOpenRef = React.useRef();\n  React.useEffect(() => {\n    prevOpenRef.current = open;\n  }, [open]);\n\n  if (!prevOpenRef.current && open && typeof window !== 'undefined' && !disableAutoFocus) {\n    // WARNING: Potentially unsafe in concurrent mode.\n    // The way the read on `nodeToRestore` is setup could make this actually safe.\n    // Say we render `open={false}` -> `open={true}` but never commit.\n    // We have now written a state that wasn't committed. But no committed effect\n    // will read this wrong value. We only read from `nodeToRestore` in effects\n    // that were committed on `open={true}`\n    // WARNING: Prevents the instance from being garbage collected. Should only\n    // hold a weak ref.\n    nodeToRestore.current = getDoc().activeElement;\n  }\n\n  React.useEffect(() => {\n    // We might render an empty child.\n    if (!open || !rootRef.current) {\n      return;\n    }\n\n    activated.current = !disableAutoFocus;\n  }, [disableAutoFocus, open]);\n  React.useEffect(() => {\n    // We might render an empty child.\n    if (!open || !rootRef.current) {\n      return;\n    }\n\n    const doc = ownerDocument(rootRef.current);\n\n    if (!rootRef.current.contains(doc.activeElement)) {\n      if (!rootRef.current.hasAttribute('tabIndex')) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(['Material-UI: The modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to \"-1\".'].join('\\n'));\n        }\n\n        rootRef.current.setAttribute('tabIndex', -1);\n      }\n\n      if (activated.current) {\n        rootRef.current.focus();\n      }\n    }\n\n    return () => {\n      // restoreLastFocus()\n      if (!disableRestoreFocus) {\n        // In IE11 it is possible for document.activeElement to be null resulting\n        // in nodeToRestore.current being null.\n        // Not all elements in IE11 have a focus method.\n        // Once IE11 support is dropped the focus() call can be unconditional.\n        if (nodeToRestore.current && nodeToRestore.current.focus) {\n          ignoreNextEnforceFocus.current = true;\n          nodeToRestore.current.focus();\n        }\n\n        nodeToRestore.current = null;\n      }\n    }; // Missing `disableRestoreFocus` which is fine.\n    // We don't support changing that prop on an open TrapFocus\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open]);\n  React.useEffect(() => {\n    // We might render an empty child.\n    if (!open || !rootRef.current) {\n      return;\n    }\n\n    const doc = ownerDocument(rootRef.current);\n\n    const contain = nativeEvent => {\n      const {\n        current: rootElement\n      } = rootRef; // Cleanup functions are executed lazily in React 17.\n      // Contain can be called between the component being unmounted and its cleanup function being run.\n\n      if (rootElement === null) {\n        return;\n      }\n\n      if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {\n        ignoreNextEnforceFocus.current = false;\n        return;\n      }\n\n      if (!rootElement.contains(doc.activeElement)) {\n        // if the focus event is not coming from inside the children's react tree, reset the refs\n        if (nativeEvent && reactFocusEventTarget.current !== nativeEvent.target || doc.activeElement !== reactFocusEventTarget.current) {\n          reactFocusEventTarget.current = null;\n        } else if (reactFocusEventTarget.current !== null) {\n          return;\n        }\n\n        if (!activated.current) {\n          return;\n        }\n\n        let tabbable = [];\n\n        if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {\n          tabbable = getTabbable(rootRef.current);\n        }\n\n        if (tabbable.length > 0) {\n          var _lastKeydown$current, _lastKeydown$current2;\n\n          const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) === null || _lastKeydown$current === void 0 ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) === null || _lastKeydown$current2 === void 0 ? void 0 : _lastKeydown$current2.key) === 'Tab');\n          const focusNext = tabbable[0];\n          const focusPrevious = tabbable[tabbable.length - 1];\n\n          if (isShiftTab) {\n            focusPrevious.focus();\n          } else {\n            focusNext.focus();\n          }\n        } else {\n          rootElement.focus();\n        }\n      }\n    };\n\n    const loopFocus = nativeEvent => {\n      lastKeydown.current = nativeEvent;\n\n      if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== 'Tab') {\n        return;\n      } // Make sure the next tab starts from the right place.\n      // doc.activeElement referes to the origin.\n\n\n      if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {\n        // We need to ignore the next contain as\n        // it will try to move the focus back to the rootRef element.\n        ignoreNextEnforceFocus.current = true;\n        sentinelEnd.current.focus();\n      }\n    };\n\n    doc.addEventListener('focusin', contain);\n    doc.addEventListener('keydown', loopFocus, true); // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area.\n    // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.\n    // Instead, we can look if the active element was restored on the BODY element.\n    //\n    // The whatwg spec defines how the browser should behave but does not explicitly mention any events:\n    // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.\n\n    const interval = setInterval(() => {\n      if (doc.activeElement.tagName === 'BODY') {\n        contain();\n      }\n    }, 50);\n    return () => {\n      clearInterval(interval);\n      doc.removeEventListener('focusin', contain);\n      doc.removeEventListener('keydown', loopFocus, true);\n    };\n  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);\n\n  const onFocus = event => {\n    if (!activated.current) {\n      nodeToRestore.current = event.relatedTarget;\n    }\n\n    activated.current = true;\n    reactFocusEventTarget.current = event.target;\n    const childrenPropsHandler = children.props.onFocus;\n\n    if (childrenPropsHandler) {\n      childrenPropsHandler(event);\n    }\n  };\n\n  const handleFocusSentinel = event => {\n    if (!activated.current) {\n      nodeToRestore.current = event.relatedTarget;\n    }\n\n    activated.current = true;\n  };\n\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      tabIndex: 0,\n      onFocus: handleFocusSentinel,\n      ref: sentinelStart,\n      \"data-test\": \"sentinelStart\"\n    }), /*#__PURE__*/React.cloneElement(children, {\n      ref: handleRef,\n      onFocus\n    }), /*#__PURE__*/_jsx(\"div\", {\n      tabIndex: 0,\n      onFocus: handleFocusSentinel,\n      ref: sentinelEnd,\n      \"data-test\": \"sentinelEnd\"\n    })]\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Unstable_TrapFocus.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * A single child content element.\n   */\n  children: elementAcceptingRef,\n\n  /**\n   * If `true`, the trap focus will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any trap focus children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the trap focus less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableAutoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the trap focus will not prevent focus from leaving the trap focus while open.\n   *\n   * Generally this should never be set to `true` as it makes the trap focus less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableEnforceFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the trap focus will not restore focus to previously focused element once\n   * trap focus is hidden.\n   * @default false\n   */\n  disableRestoreFocus: PropTypes.bool,\n\n  /**\n   * Return the document the trap focus is mounted into.\n   * Provide the prop if you need the restore focus to work between different documents.\n   * @default function defaultGetDoc() {\n   *   return document;\n   * }\n   */\n  getDoc: PropTypes.func,\n\n  /**\n   * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.\n   * For instance, you can provide the \"tabbable\" npm dependency.\n   * @param {HTMLElement} root\n   */\n  getTabbable: PropTypes.func,\n\n  /**\n   * This prop extends the `open` prop.\n   * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.\n   * This prop should be memoized.\n   * It can be used to support multiple trap focus mounted at the same time.\n   * @default function defaultIsEnabled() {\n   *   return true;\n   * }\n   */\n  isEnabled: PropTypes.func,\n\n  /**\n   * If `true`, focus is locked.\n   */\n  open: PropTypes.bool.isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Unstable_TrapFocus['propTypes' + ''] = exactProp(Unstable_TrapFocus.propTypes);\n}\n\nexport default Unstable_TrapFocus;"]},"metadata":{},"sourceType":"module"}