{"ast":null,"code":"import { put } from 'redux-saga/effects';\nimport Endpoint, { urlFactory } from '../../../../constants/Endpoint';\nimport postData from '../../../../utils/fetchMethod/postData';\nimport EndpointStatus from '../../../../constants/EndpointStatus';\nimport LoginErrorCode from '../constants/LoginErrorCode';\nimport postLoginSuccessActionCreator from '../actionCreator/postLoginSuccessActionCreator';\nimport Session from '../../../../../entities/Session';\nimport ErrorCode from '../../../../constants/ErrorCode';\nimport postLoginErrorActionCreator from '../actionCreator/postLoginErrorActionCreator';\nimport Error from '../../../../../entities/Error';\n\nfunction* postLoginWorker(action) {\n  const {\n    email,\n    password\n  } = (action === null || action === void 0 ? void 0 : action.payload) || {};\n  const response = yield postData({\n    url: urlFactory(Endpoint.LOGIN),\n    data: {\n      email,\n      password\n    }\n  });\n  const {\n    data,\n    status\n  } = response || {};\n\n  if (status === EndpointStatus.NOT_FOUND) {\n    return yield put(postLoginErrorActionCreator([new Error({\n      message: 'User not found',\n      code: LoginErrorCode.NOT_FOUND\n    })]));\n  }\n\n  if (status === EndpointStatus.BAD_REQUEST) {\n    var _data$errors;\n\n    return yield put(postLoginErrorActionCreator([new Error({\n      message: (_data$errors = data.errors) === null || _data$errors === void 0 ? void 0 : _data$errors[0],\n      code: LoginErrorCode.NOT_FOUND\n    })]));\n  }\n\n  if (status === EndpointStatus.SUCCESS) {\n    return yield put(postLoginSuccessActionCreator(new Session({ ...(data === null || data === void 0 ? void 0 : data.result),\n      email\n    })));\n  } // Generic errorCode\n\n\n  return yield put(postLoginErrorActionCreator([new Error({\n    code: ErrorCode.DEFAULT\n  })]));\n}\n\nexport default postLoginWorker;","map":{"version":3,"sources":["C:/Progetti/weight-control/app/src/store/state/authentication/login/worker/postLoginWorker.js"],"names":["put","Endpoint","urlFactory","postData","EndpointStatus","LoginErrorCode","postLoginSuccessActionCreator","Session","ErrorCode","postLoginErrorActionCreator","Error","postLoginWorker","action","email","password","payload","response","url","LOGIN","data","status","NOT_FOUND","message","code","BAD_REQUEST","errors","SUCCESS","result","DEFAULT"],"mappings":"AAAA,SAASA,GAAT,QAAoB,oBAApB;AACA,OAAOC,QAAP,IAAmBC,UAAnB,QAAqC,gCAArC;AACA,OAAOC,QAAP,MAAqB,wCAArB;AACA,OAAOC,cAAP,MAA2B,sCAA3B;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,6BAAP,MAA0C,gDAA1C;AACA,OAAOC,OAAP,MAAoB,iCAApB;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,OAAOC,2BAAP,MAAwC,8CAAxC;AACA,OAAOC,KAAP,MAAkB,+BAAlB;;AAEA,UAAUC,eAAV,CAA0BC,MAA1B,EAAkC;AAChC,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA;AAFI,MAGF,CAAAF,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEG,OAAR,KAAmB,EAHvB;AAKA,QAAMC,QAAQ,GAAG,MAAMb,QAAQ,CAAC;AAC9Bc,IAAAA,GAAG,EAAEf,UAAU,CAACD,QAAQ,CAACiB,KAAV,CADe;AAE9BC,IAAAA,IAAI,EAAE;AAAEN,MAAAA,KAAF;AAASC,MAAAA;AAAT;AAFwB,GAAD,CAA/B;AAKA,QAAM;AACJK,IAAAA,IADI;AAEJC,IAAAA;AAFI,MAGFJ,QAAQ,IAAI,EAHhB;;AAKA,MAAII,MAAM,KAAKhB,cAAc,CAACiB,SAA9B,EAAyC;AACvC,WAAO,MAAMrB,GAAG,CAACS,2BAA2B,CAAC,CAAC,IAAIC,KAAJ,CAAU;AACtDY,MAAAA,OAAO,EAAE,gBAD6C;AAEtDC,MAAAA,IAAI,EAAElB,cAAc,CAACgB;AAFiC,KAAV,CAAD,CAAD,CAA5B,CAAhB;AAID;;AAED,MAAID,MAAM,KAAKhB,cAAc,CAACoB,WAA9B,EAA2C;AAAA;;AACzC,WAAO,MAAMxB,GAAG,CAACS,2BAA2B,CAAC,CAAC,IAAIC,KAAJ,CAAU;AACtDY,MAAAA,OAAO,kBAAEH,IAAI,CAACM,MAAP,iDAAE,aAAc,CAAd,CAD6C;AAEtDF,MAAAA,IAAI,EAAElB,cAAc,CAACgB;AAFiC,KAAV,CAAD,CAAD,CAA5B,CAAhB;AAID;;AAED,MAAID,MAAM,KAAKhB,cAAc,CAACsB,OAA9B,EAAuC;AACrC,WAAO,MAAM1B,GAAG,CAACM,6BAA6B,CAAC,IAAIC,OAAJ,CAAY,EAAE,IAAGY,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEQ,MAAT,CAAF;AAAmBd,MAAAA;AAAnB,KAAZ,CAAD,CAA9B,CAAhB;AACD,GAhC+B,CAkChC;;;AACA,SAAO,MAAMb,GAAG,CAACS,2BAA2B,CAAC,CAAC,IAAIC,KAAJ,CAAU;AACtDa,IAAAA,IAAI,EAAEf,SAAS,CAACoB;AADsC,GAAV,CAAD,CAAD,CAA5B,CAAhB;AAGD;;AAED,eAAejB,eAAf","sourcesContent":["import { put } from 'redux-saga/effects';\r\nimport Endpoint, { urlFactory } from '../../../../constants/Endpoint';\r\nimport postData from '../../../../utils/fetchMethod/postData';\r\nimport EndpointStatus from '../../../../constants/EndpointStatus';\r\nimport LoginErrorCode from '../constants/LoginErrorCode';\r\nimport postLoginSuccessActionCreator from '../actionCreator/postLoginSuccessActionCreator';\r\nimport Session from '../../../../../entities/Session';\r\nimport ErrorCode from '../../../../constants/ErrorCode';\r\nimport postLoginErrorActionCreator from '../actionCreator/postLoginErrorActionCreator';\r\nimport Error from '../../../../../entities/Error';\r\n\r\nfunction* postLoginWorker(action) {\r\n  const {\r\n    email,\r\n    password,\r\n  } = action?.payload || {};\r\n\r\n  const response = yield postData({\r\n    url: urlFactory(Endpoint.LOGIN),\r\n    data: { email, password },\r\n  });\r\n\r\n  const {\r\n    data,\r\n    status,\r\n  } = response || {};\r\n\r\n  if (status === EndpointStatus.NOT_FOUND) {\r\n    return yield put(postLoginErrorActionCreator([new Error({\r\n      message: 'User not found',\r\n      code: LoginErrorCode.NOT_FOUND,\r\n    })]));\r\n  }\r\n\r\n  if (status === EndpointStatus.BAD_REQUEST) {\r\n    return yield put(postLoginErrorActionCreator([new Error({\r\n      message: data.errors?.[0],\r\n      code: LoginErrorCode.NOT_FOUND,\r\n    })]));\r\n  }\r\n\r\n  if (status === EndpointStatus.SUCCESS) {\r\n    return yield put(postLoginSuccessActionCreator(new Session({ ...data?.result, email })));\r\n  }\r\n\r\n  // Generic errorCode\r\n  return yield put(postLoginErrorActionCreator([new Error({\r\n    code: ErrorCode.DEFAULT,\r\n  })]));\r\n}\r\n\r\nexport default postLoginWorker;\r\n"]},"metadata":{},"sourceType":"module"}