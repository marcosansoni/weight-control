{"ast":null,"code":"var _jsxFileName = \"C:\\\\Progetti\\\\weight-control\\\\app\\\\src\\\\utils\\\\useSnackbar.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useEffect, useState } from 'react';\nimport { Slide, Snackbar } from '@material-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst useSnackbar = (notification, resetNotificationActionCreator, onSnackbarOpen) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState(false);\n  useEffect(() => () => {\n    if (notification === null || notification === void 0 ? void 0 : notification.length) dispatch(resetNotificationActionCreator());\n  }, []);\n  useEffect(() => {\n    if (notification === null || notification === void 0 ? void 0 : notification.length) {\n      var _notification$;\n\n      setSnackbarOpen(true);\n      setSnackbarMessage((_notification$ = notification[0]) === null || _notification$ === void 0 ? void 0 : _notification$.message);\n      onSnackbarOpen === null || onSnackbarOpen === void 0 ? void 0 : onSnackbarOpen();\n    }\n  }, [notification]);\n\n  const handleSnackbarClose = () => {\n    setSnackbarOpen(false);\n    dispatch(resetNotificationActionCreator());\n  };\n\n  return () => /*#__PURE__*/_jsxDEV(Snackbar, {\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'left'\n    },\n    open: snackbarOpen,\n    onClose: handleSnackbarClose,\n    TransitionComponent: p => /*#__PURE__*/_jsxDEV(Slide, { ...p,\n      direction: \"up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 36\n    }, this),\n    message: snackbarMessage,\n    autoHideDuration: 3000\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(useSnackbar, \"g8liKwS84cS8A3Hgoj6L+pJ2FiU=\", false, function () {\n  return [useDispatch];\n});\n\nexport default useSnackbar;","map":{"version":3,"sources":["C:/Progetti/weight-control/app/src/utils/useSnackbar.js"],"names":["React","useEffect","useState","Slide","Snackbar","useDispatch","useSnackbar","notification","resetNotificationActionCreator","onSnackbarOpen","dispatch","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","length","message","handleSnackbarClose","vertical","horizontal","p"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,mBAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;;;AAEA,MAAMC,WAAW,GAAG,CAACC,YAAD,EAAeC,8BAAf,EAA+CC,cAA/C,KAAkE;AAAA;;AACpF,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACW,eAAD,EAAkBC,kBAAlB,IAAwCZ,QAAQ,CAAC,KAAD,CAAtD;AAEAD,EAAAA,SAAS,CAAC,MAAM,MAAM;AACpB,QAAIM,YAAJ,aAAIA,YAAJ,uBAAIA,YAAY,CAAEQ,MAAlB,EAA0BL,QAAQ,CAACF,8BAA8B,EAA/B,CAAR;AAC3B,GAFQ,EAEN,EAFM,CAAT;AAIAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,YAAJ,aAAIA,YAAJ,uBAAIA,YAAY,CAAEQ,MAAlB,EAA0B;AAAA;;AACxBH,MAAAA,eAAe,CAAC,IAAD,CAAf;AACAE,MAAAA,kBAAkB,mBAACP,YAAY,CAAC,CAAD,CAAb,mDAAC,eAAiBS,OAAlB,CAAlB;AACAP,MAAAA,cAAc,SAAd,IAAAA,cAAc,WAAd,YAAAA,cAAc;AACf;AACF,GANQ,EAMN,CAACF,YAAD,CANM,CAAT;;AAQA,QAAMU,mBAAmB,GAAG,MAAM;AAChCL,IAAAA,eAAe,CAAC,KAAD,CAAf;AACAF,IAAAA,QAAQ,CAACF,8BAA8B,EAA/B,CAAR;AACD,GAHD;;AAKA,SAAO,mBACL,QAAC,QAAD;AACE,IAAA,YAAY,EAAE;AACZU,MAAAA,QAAQ,EAAE,QADE;AAEZC,MAAAA,UAAU,EAAE;AAFA,KADhB;AAKE,IAAA,IAAI,EAAER,YALR;AAME,IAAA,OAAO,EAAEM,mBANX;AAOE,IAAA,mBAAmB,EAAGG,CAAD,iBAAQ,QAAC,KAAD,OAAWA,CAAX;AAAc,MAAA,SAAS,EAAC;AAAxB;AAAA;AAAA;AAAA;AAAA,YAP/B;AAQE,IAAA,OAAO,EAAEP,eARX;AASE,IAAA,gBAAgB,EAAE;AATpB;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CAnCD;;GAAMP,W;UACaD,W;;;AAoCnB,eAAeC,WAAf","sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Slide, Snackbar } from '@material-ui/core';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst useSnackbar = (notification, resetNotificationActionCreator, onSnackbarOpen) => {\r\n  const dispatch = useDispatch();\r\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n  const [snackbarMessage, setSnackbarMessage] = useState(false);\r\n\r\n  useEffect(() => () => {\r\n    if (notification?.length) dispatch(resetNotificationActionCreator());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (notification?.length) {\r\n      setSnackbarOpen(true);\r\n      setSnackbarMessage(notification[0]?.message);\r\n      onSnackbarOpen?.();\r\n    }\r\n  }, [notification]);\r\n\r\n  const handleSnackbarClose = () => {\r\n    setSnackbarOpen(false);\r\n    dispatch(resetNotificationActionCreator());\r\n  };\r\n\r\n  return () => (\r\n    <Snackbar\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'left',\r\n      }}\r\n      open={snackbarOpen}\r\n      onClose={handleSnackbarClose}\r\n      TransitionComponent={(p) => (<Slide {...p} direction=\"up\" />)}\r\n      message={snackbarMessage}\r\n      autoHideDuration={3000}\r\n    />\r\n  );\r\n};\r\n\r\nexport default useSnackbar;\r\n"]},"metadata":{},"sourceType":"module"}