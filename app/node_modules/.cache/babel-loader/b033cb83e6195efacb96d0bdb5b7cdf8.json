{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport FormGroup from '../FormGroup';\nimport useForkRef from '../utils/useForkRef';\nimport useControlled from '../utils/useControlled';\nimport RadioGroupContext from './RadioGroupContext';\nimport useId from '../utils/useId';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst RadioGroup = /*#__PURE__*/React.forwardRef(function RadioGroup(props, ref) {\n  const {\n    // private\n    // eslint-disable-next-line react/prop-types\n    actions,\n    children,\n    name: nameProp,\n    value: valueProp,\n    onChange\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"actions\", \"children\", \"name\", \"value\", \"onChange\"]);\n\n  const rootRef = React.useRef(null);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: props.defaultValue,\n    name: 'RadioGroup'\n  });\n  React.useImperativeHandle(actions, () => ({\n    focus: () => {\n      let input = rootRef.current.querySelector('input:not(:disabled):checked');\n\n      if (!input) {\n        input = rootRef.current.querySelector('input:not(:disabled)');\n      }\n\n      if (input) {\n        input.focus();\n      }\n    }\n  }), []);\n  const handleRef = useForkRef(ref, rootRef);\n\n  const handleChange = event => {\n    setValueState(event.target.value);\n\n    if (onChange) {\n      onChange(event, event.target.value);\n    }\n  };\n\n  const name = useId(nameProp);\n  return /*#__PURE__*/_jsx(RadioGroupContext.Provider, {\n    value: {\n      name,\n      onChange: handleChange,\n      value\n    },\n    children: /*#__PURE__*/_jsx(FormGroup, _extends({\n      role: \"radiogroup\",\n      ref: handleRef\n    }, other, {\n      children: children\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? RadioGroup.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string]),\n\n  /**\n   * The name used to reference the value of the control.\n   * If you don't provide this prop, it falls back to a randomly generated name.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when a radio button is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Value of the selected radio button. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default RadioGroup;","map":{"version":3,"sources":["C:/Progetti/weight-control/app/node_modules/@material-ui/core/RadioGroup/RadioGroup.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","FormGroup","useForkRef","useControlled","RadioGroupContext","useId","jsx","_jsx","RadioGroup","forwardRef","props","ref","actions","children","name","nameProp","value","valueProp","onChange","other","rootRef","useRef","setValueState","controlled","default","defaultValue","useImperativeHandle","focus","input","current","querySelector","handleRef","handleChange","event","target","Provider","role","process","env","NODE_ENV","propTypes","node","oneOfType","arrayOf","string","number","func","any"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport FormGroup from '../FormGroup';\nimport useForkRef from '../utils/useForkRef';\nimport useControlled from '../utils/useControlled';\nimport RadioGroupContext from './RadioGroupContext';\nimport useId from '../utils/useId';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst RadioGroup = /*#__PURE__*/React.forwardRef(function RadioGroup(props, ref) {\n  const {\n    // private\n    // eslint-disable-next-line react/prop-types\n    actions,\n    children,\n    name: nameProp,\n    value: valueProp,\n    onChange\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"actions\", \"children\", \"name\", \"value\", \"onChange\"]);\n\n  const rootRef = React.useRef(null);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: props.defaultValue,\n    name: 'RadioGroup'\n  });\n  React.useImperativeHandle(actions, () => ({\n    focus: () => {\n      let input = rootRef.current.querySelector('input:not(:disabled):checked');\n\n      if (!input) {\n        input = rootRef.current.querySelector('input:not(:disabled)');\n      }\n\n      if (input) {\n        input.focus();\n      }\n    }\n  }), []);\n  const handleRef = useForkRef(ref, rootRef);\n\n  const handleChange = event => {\n    setValueState(event.target.value);\n\n    if (onChange) {\n      onChange(event, event.target.value);\n    }\n  };\n\n  const name = useId(nameProp);\n  return /*#__PURE__*/_jsx(RadioGroupContext.Provider, {\n    value: {\n      name,\n      onChange: handleChange,\n      value\n    },\n    children: /*#__PURE__*/_jsx(FormGroup, _extends({\n      role: \"radiogroup\",\n      ref: handleRef\n    }, other, {\n      children: children\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? RadioGroup.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string]),\n\n  /**\n   * The name used to reference the value of the control.\n   * If you don't provide this prop, it falls back to a randomly generated name.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when a radio button is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Value of the selected radio button. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default RadioGroup;"]},"metadata":{},"sourceType":"module"}