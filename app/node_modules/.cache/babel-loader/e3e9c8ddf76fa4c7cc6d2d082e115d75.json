{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n/* eslint-disable no-constant-condition */\n\nimport * as React from 'react';\nimport { setRef, useEventCallback, useControlled, unstable_useId as useId } from '../utils'; // https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript\n// Give up on IE11 support for this feature\n\nfunction stripDiacritics(string) {\n  return typeof string.normalize !== 'undefined' ? string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '') : string;\n}\n\nexport function createFilterOptions(config = {}) {\n  const {\n    ignoreAccents = true,\n    ignoreCase = true,\n    limit,\n    matchFrom = 'any',\n    stringify,\n    trim = false\n  } = config;\n  return (options, {\n    inputValue,\n    getOptionLabel\n  }) => {\n    let input = trim ? inputValue.trim() : inputValue;\n\n    if (ignoreCase) {\n      input = input.toLowerCase();\n    }\n\n    if (ignoreAccents) {\n      input = stripDiacritics(input);\n    }\n\n    const filteredOptions = options.filter(option => {\n      let candidate = (stringify || getOptionLabel)(option);\n\n      if (ignoreCase) {\n        candidate = candidate.toLowerCase();\n      }\n\n      if (ignoreAccents) {\n        candidate = stripDiacritics(candidate);\n      }\n\n      return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;\n    });\n    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;\n  };\n} // To replace with .findIndex() once we stop IE11 support.\n\nfunction findIndex(array, comp) {\n  for (let i = 0; i < array.length; i += 1) {\n    if (comp(array[i])) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nconst defaultFilterOptions = createFilterOptions(); // Number of options to jump in list box when pageup and pagedown keys are used.\n\nconst pageSize = 5;\nexport default function useAutocomplete(props) {\n  const {\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    componentName = 'useAutocomplete',\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    filterOptions = defaultFilterOptions,\n    filterSelectedOptions = false,\n    freeSolo = false,\n    getOptionDisabled,\n    getOptionLabel: getOptionLabelProp = option => {\n      var _option$label;\n\n      return (_option$label = option.label) !== null && _option$label !== void 0 ? _option$label : option;\n    },\n    isOptionEqualToValue = (option, value) => option === value,\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    multiple = false,\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open: openProp,\n    openOnFocus = false,\n    options,\n    selectOnFocus = !props.freeSolo,\n    value: valueProp\n  } = props;\n  const id = useId(idProp);\n  let getOptionLabel = getOptionLabelProp;\n\n  getOptionLabel = option => {\n    const optionLabel = getOptionLabelProp(option);\n\n    if (typeof optionLabel !== 'string') {\n      if (process.env.NODE_ENV !== 'production') {\n        const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;\n        console.error(`Material-UI: The \\`getOptionLabel\\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);\n      }\n\n      return String(optionLabel);\n    }\n\n    return optionLabel;\n  };\n\n  const ignoreFocus = React.useRef(false);\n  const firstFocus = React.useRef(true);\n  const inputRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [focusedTag, setFocusedTag] = React.useState(-1);\n  const defaultHighlighted = autoHighlight ? 0 : -1;\n  const highlightedIndexRef = React.useRef(defaultHighlighted);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: componentName\n  });\n  const [inputValue, setInputValueState] = useControlled({\n    controlled: inputValueProp,\n    default: '',\n    name: componentName,\n    state: 'inputValue'\n  });\n  const [focused, setFocused] = React.useState(false);\n  const resetInputValue = useEventCallback((event, newValue) => {\n    let newInputValue;\n\n    if (multiple) {\n      newInputValue = '';\n    } else if (newValue == null) {\n      newInputValue = '';\n    } else {\n      const optionLabel = getOptionLabel(newValue);\n      newInputValue = typeof optionLabel === 'string' ? optionLabel : '';\n    }\n\n    if (inputValue === newInputValue) {\n      return;\n    }\n\n    setInputValueState(newInputValue);\n\n    if (onInputChange) {\n      onInputChange(event, newInputValue, 'reset');\n    }\n  });\n  React.useEffect(() => {\n    resetInputValue(null, value);\n  }, [value, resetInputValue]);\n  const [open, setOpenState] = useControlled({\n    controlled: openProp,\n    default: false,\n    name: componentName,\n    state: 'open'\n  });\n  const [inputPristine, setInputPristine] = React.useState(true);\n  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);\n  const popupOpen = open;\n  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {\n    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {\n      return false;\n    }\n\n    return true;\n  }), // we use the empty string to manipulate `filterOptions` to not filter any options\n  // i.e. the filter predicate always returns true\n  {\n    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,\n    getOptionLabel\n  }) : [];\n  const listboxAvailable = open && filteredOptions.length > 0;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (value !== null && !freeSolo && options.length > 0) {\n      const missingValue = (multiple ? value : [value]).filter(value2 => !options.some(option => isOptionEqualToValue(option, value2)));\n\n      if (missingValue.length > 0) {\n        console.warn([`Material-UI: The value provided to ${componentName} is invalid.`, `None of the options match with \\`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\\`.`, 'You can use the `isOptionEqualToValue` prop to customize the equality test.'].join('\\n'));\n      }\n    }\n  }\n\n  const focusTag = useEventCallback(tagToFocus => {\n    if (tagToFocus === -1) {\n      inputRef.current.focus();\n    } else {\n      anchorEl.querySelector(`[data-tag-index=\"${tagToFocus}\"]`).focus();\n    }\n  }); // Ensure the focusedTag is never inconsistent\n\n  React.useEffect(() => {\n    if (multiple && focusedTag > value.length - 1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n  }, [value, multiple, focusedTag, focusTag]);\n\n  function validOptionIndex(index, direction) {\n    if (!listboxRef.current || index === -1) {\n      return -1;\n    }\n\n    let nextFocus = index;\n\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === filteredOptions.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n\n      const option = listboxRef.current.querySelector(`[data-option-index=\"${nextFocus}\"]`); // Same logic as MenuList.js\n\n      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';\n\n      if (option && !option.hasAttribute('tabindex') || nextFocusDisabled) {\n        // Move to the next element.\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n\n  const setHighlightedIndex = useEventCallback(({\n    event,\n    index,\n    reason = 'auto'\n  }) => {\n    highlightedIndexRef.current = index; // does the index exist?\n\n    if (index === -1) {\n      inputRef.current.removeAttribute('aria-activedescendant');\n    } else {\n      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);\n    }\n\n    if (onHighlightChange) {\n      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);\n    }\n\n    if (!listboxRef.current) {\n      return;\n    }\n\n    const prev = listboxRef.current.querySelector('[role=\"option\"].Mui-focused');\n\n    if (prev) {\n      prev.classList.remove('Mui-focused');\n      prev.classList.remove('Mui-focusVisible');\n    }\n\n    const listboxNode = listboxRef.current.parentElement.querySelector('[role=\"listbox\"]'); // \"No results\"\n\n    if (!listboxNode) {\n      return;\n    }\n\n    if (index === -1) {\n      listboxNode.scrollTop = 0;\n      return;\n    }\n\n    const option = listboxRef.current.querySelector(`[data-option-index=\"${index}\"]`);\n\n    if (!option) {\n      return;\n    }\n\n    option.classList.add('Mui-focused');\n\n    if (reason === 'keyboard') {\n      option.classList.add('Mui-focusVisible');\n    } // Scroll active descendant into view.\n    // Logic copied from https://www.w3.org/TR/wai-aria-practices/examples/listbox/js/listbox.js\n    //\n    // Consider this API instead once it has a better browser support:\n    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });\n\n\n    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse') {\n      const element = option;\n      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n      const elementBottom = element.offsetTop + element.offsetHeight;\n\n      if (elementBottom > scrollBottom) {\n        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {\n        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);\n      }\n    }\n  });\n  const changeHighlightedIndex = useEventCallback(({\n    event,\n    diff,\n    direction = 'next',\n    reason = 'auto'\n  }) => {\n    if (!popupOpen) {\n      return;\n    }\n\n    const getNextIndex = () => {\n      const maxIndex = filteredOptions.length - 1;\n\n      if (diff === 'reset') {\n        return defaultHighlighted;\n      }\n\n      if (diff === 'start') {\n        return 0;\n      }\n\n      if (diff === 'end') {\n        return maxIndex;\n      }\n\n      const newIndex = highlightedIndexRef.current + diff;\n\n      if (newIndex < 0) {\n        if (newIndex === -1 && includeInputInList) {\n          return -1;\n        }\n\n        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {\n          return 0;\n        }\n\n        return maxIndex;\n      }\n\n      if (newIndex > maxIndex) {\n        if (newIndex === maxIndex + 1 && includeInputInList) {\n          return -1;\n        }\n\n        if (disableListWrap || Math.abs(diff) > 1) {\n          return maxIndex;\n        }\n\n        return 0;\n      }\n\n      return newIndex;\n    };\n\n    const nextIndex = validOptionIndex(getNextIndex(), direction);\n    setHighlightedIndex({\n      index: nextIndex,\n      reason,\n      event\n    }); // Sync the content of the input with the highlighted option.\n\n    if (autoComplete && diff !== 'reset') {\n      if (nextIndex === -1) {\n        inputRef.current.value = inputValue;\n      } else {\n        const option = getOptionLabel(filteredOptions[nextIndex]);\n        inputRef.current.value = option; // The portion of the selected suggestion that has not been typed by the user,\n        // a completion string, appears inline after the input cursor in the textbox.\n\n        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());\n\n        if (index === 0 && inputValue.length > 0) {\n          inputRef.current.setSelectionRange(inputValue.length, option.length);\n        }\n      }\n    }\n  });\n  const syncHighlightedIndex = React.useCallback(() => {\n    if (!popupOpen) {\n      return;\n    }\n\n    const valueItem = multiple ? value[0] : value; // The popup is empty, reset\n\n    if (filteredOptions.length === 0 || valueItem == null) {\n      changeHighlightedIndex({\n        diff: 'reset'\n      });\n      return;\n    }\n\n    if (!listboxRef.current) {\n      return;\n    } // Synchronize the value with the highlighted index\n\n\n    if (valueItem != null) {\n      const currentOption = filteredOptions[highlightedIndexRef.current]; // Keep the current highlighted index if possible\n\n      if (multiple && currentOption && findIndex(value, val => isOptionEqualToValue(currentOption, val)) !== -1) {\n        return;\n      }\n\n      const itemIndex = findIndex(filteredOptions, optionItem => isOptionEqualToValue(optionItem, valueItem));\n\n      if (itemIndex === -1) {\n        changeHighlightedIndex({\n          diff: 'reset'\n        });\n      } else {\n        setHighlightedIndex({\n          index: itemIndex\n        });\n      }\n\n      return;\n    } // Prevent the highlighted index to leak outside the boundaries.\n\n\n    if (highlightedIndexRef.current >= filteredOptions.length - 1) {\n      setHighlightedIndex({\n        index: filteredOptions.length - 1\n      });\n      return;\n    } // Restore the focus to the previous index.\n\n\n    setHighlightedIndex({\n      index: highlightedIndexRef.current\n    }); // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [// Only sync the highlighted index when the option switch between empty and not\n  filteredOptions.length, // Don't sync the highlighted index with the value when multiple\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);\n  const handleListboxRef = useEventCallback(node => {\n    setRef(listboxRef, node);\n\n    if (!node) {\n      return;\n    }\n\n    syncHighlightedIndex();\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {\n        console.error([`Material-UI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, '', componentName === 'useAutocomplete' ? 'Make sure you have binded getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\\n'));\n      }\n    }, [componentName]);\n  }\n\n  React.useEffect(() => {\n    syncHighlightedIndex();\n  }, [syncHighlightedIndex]);\n\n  const handleOpen = event => {\n    if (open) {\n      return;\n    }\n\n    setOpenState(true);\n    setInputPristine(true);\n\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n\n  const handleClose = (event, reason) => {\n    if (!open) {\n      return;\n    }\n\n    setOpenState(false);\n\n    if (onClose) {\n      onClose(event, reason);\n    }\n  };\n\n  const handleValue = (event, newValue, reason, details) => {\n    if (value === newValue) {\n      return;\n    }\n\n    if (onChange) {\n      onChange(event, newValue, reason, details);\n    }\n\n    setValueState(newValue);\n  };\n\n  const isTouch = React.useRef(false);\n\n  const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options') => {\n    let reason = reasonProp;\n    let newValue = option;\n\n    if (multiple) {\n      newValue = Array.isArray(value) ? value.slice() : [];\n\n      if (process.env.NODE_ENV !== 'production') {\n        const matches = newValue.filter(val => isOptionEqualToValue(option, val));\n\n        if (matches.length > 1) {\n          console.error([`Material-UI: The \\`isOptionEqualToValue\\` method of ${componentName} do not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join('\\n'));\n        }\n      }\n\n      const itemIndex = findIndex(newValue, valueItem => isOptionEqualToValue(option, valueItem));\n\n      if (itemIndex === -1) {\n        newValue.push(option);\n      } else if (origin !== 'freeSolo') {\n        newValue.splice(itemIndex, 1);\n        reason = 'removeOption';\n      }\n    }\n\n    resetInputValue(event, newValue);\n    handleValue(event, newValue, reason, {\n      option\n    });\n\n    if (!disableCloseOnSelect && !event.ctrlKey && !event.metaKey) {\n      handleClose(event, reason);\n    }\n\n    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {\n      inputRef.current.blur();\n    }\n  };\n\n  function validTagIndex(index, direction) {\n    if (index === -1) {\n      return -1;\n    }\n\n    let nextFocus = index;\n\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n\n      const option = anchorEl.querySelector(`[data-tag-index=\"${nextFocus}\"]`); // Same logic as MenuList.js\n\n      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n\n  const handleFocusTag = (event, direction) => {\n    if (!multiple) {\n      return;\n    }\n\n    handleClose(event, 'toggleInput');\n    let nextTag = focusedTag;\n\n    if (focusedTag === -1) {\n      if (inputValue === '' && direction === 'previous') {\n        nextTag = value.length - 1;\n      }\n    } else {\n      nextTag += direction === 'next' ? 1 : -1;\n\n      if (nextTag < 0) {\n        nextTag = 0;\n      }\n\n      if (nextTag === value.length) {\n        nextTag = -1;\n      }\n    }\n\n    nextTag = validTagIndex(nextTag, direction);\n    setFocusedTag(nextTag);\n    focusTag(nextTag);\n  };\n\n  const handleClear = event => {\n    ignoreFocus.current = true;\n    setInputValueState('');\n\n    if (onInputChange) {\n      onInputChange(event, '', 'clear');\n    }\n\n    handleValue(event, multiple ? [] : null, 'clear');\n  };\n\n  const handleKeyDown = other => event => {\n    if (other.onKeyDown) {\n      other.onKeyDown(event);\n    }\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    if (focusedTag !== -1 && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) === -1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    } // Wait until IME is settled.\n\n\n    if (event.which !== 229) {\n      switch (event.key) {\n        case 'Home':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'start',\n              direction: 'next',\n              reason: 'keyboard',\n              event\n            });\n          }\n\n          break;\n\n        case 'End':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'end',\n              direction: 'previous',\n              reason: 'keyboard',\n              event\n            });\n          }\n\n          break;\n\n        case 'PageUp':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -pageSize,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n\n        case 'PageDown':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: pageSize,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n\n        case 'ArrowDown':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: 1,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n\n        case 'ArrowUp':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -1,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n\n        case 'ArrowLeft':\n          handleFocusTag(event, 'previous');\n          break;\n\n        case 'ArrowRight':\n          handleFocusTag(event, 'next');\n          break;\n\n        case 'Enter':\n          if (highlightedIndexRef.current !== -1 && popupOpen) {\n            const option = filteredOptions[highlightedIndexRef.current];\n            const disabled = getOptionDisabled ? getOptionDisabled(option) : false; // Avoid early form validation, let the end-users continue filling the form.\n\n            event.preventDefault();\n\n            if (disabled) {\n              return;\n            }\n\n            selectNewValue(event, option, 'selectOption'); // Move the selection to the end.\n\n            if (autoComplete) {\n              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n            }\n          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {\n            if (multiple) {\n              // Allow people to add new values before they submit the form.\n              event.preventDefault();\n            }\n\n            selectNewValue(event, inputValue, 'createOption', 'freeSolo');\n          }\n\n          break;\n\n        case 'Escape':\n          if (popupOpen) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault(); // Avoid the Modal to handle the event.\n\n            event.stopPropagation();\n            handleClose(event, 'escape');\n          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault(); // Avoid the Modal to handle the event.\n\n            event.stopPropagation();\n            handleClear(event);\n          }\n\n          break;\n\n        case 'Backspace':\n          if (multiple && inputValue === '' && value.length > 0) {\n            const index = focusedTag === -1 ? value.length - 1 : focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n\n          break;\n\n        default:\n      }\n    }\n  };\n\n  const handleFocus = event => {\n    setFocused(true);\n\n    if (openOnFocus && !ignoreFocus.current) {\n      handleOpen(event);\n    }\n  };\n\n  const handleBlur = event => {\n    // Ignore the event when using the scrollbar with IE11\n    if (listboxRef.current !== null && listboxRef.current.parentElement.contains(document.activeElement)) {\n      inputRef.current.focus();\n      return;\n    }\n\n    setFocused(false);\n    firstFocus.current = true;\n    ignoreFocus.current = false;\n\n    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {\n      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');\n    } else if (autoSelect && freeSolo && inputValue !== '') {\n      selectNewValue(event, inputValue, 'blur', 'freeSolo');\n    } else if (clearOnBlur) {\n      resetInputValue(event, value);\n    }\n\n    handleClose(event, 'blur');\n  };\n\n  const handleInputChange = event => {\n    const newValue = event.target.value;\n\n    if (inputValue !== newValue) {\n      setInputValueState(newValue);\n      setInputPristine(false);\n\n      if (onInputChange) {\n        onInputChange(event, newValue, 'input');\n      }\n    }\n\n    if (newValue === '') {\n      if (!disableClearable && !multiple) {\n        handleValue(event, null, 'clear');\n      }\n    } else {\n      handleOpen(event);\n    }\n  };\n\n  const handleOptionMouseOver = event => {\n    setHighlightedIndex({\n      event,\n      index: Number(event.currentTarget.getAttribute('data-option-index')),\n      reason: 'mouse'\n    });\n  };\n\n  const handleOptionTouchStart = () => {\n    isTouch.current = true;\n  };\n\n  const handleOptionClick = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    selectNewValue(event, filteredOptions[index], 'selectOption');\n    isTouch.current = false;\n  };\n\n  const handleTagDelete = index => event => {\n    const newValue = value.slice();\n    newValue.splice(index, 1);\n    handleValue(event, newValue, 'removeOption', {\n      option: value[index]\n    });\n  };\n\n  const handlePopupIndicator = event => {\n    if (open) {\n      handleClose(event, 'toggleInput');\n    } else {\n      handleOpen(event);\n    }\n  }; // Prevent input blur when interacting with the combobox\n\n\n  const handleMouseDown = event => {\n    if (event.target.getAttribute('id') !== id) {\n      event.preventDefault();\n    }\n  }; // Focus the input when interacting with the combobox\n\n\n  const handleClick = () => {\n    inputRef.current.focus();\n\n    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {\n      inputRef.current.select();\n    }\n\n    firstFocus.current = false;\n  };\n\n  const handleInputMouseDown = event => {\n    if (inputValue === '' || !open) {\n      handlePopupIndicator(event);\n    }\n  };\n\n  let dirty = freeSolo && inputValue.length > 0;\n  dirty = dirty || (multiple ? value.length > 0 : value !== null);\n  let groupedOptions = filteredOptions;\n\n  if (groupBy) {\n    // used to keep track of key and indexes in the result array\n    const indexBy = new Map();\n    let warn = false;\n    groupedOptions = filteredOptions.reduce((acc, option, index) => {\n      const group = groupBy(option);\n\n      if (acc.length > 0 && acc[acc.length - 1].group === group) {\n        acc[acc.length - 1].options.push(option);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          if (indexBy.get(group) && !warn) {\n            console.warn(`Material-UI: The options provided combined with the \\`groupBy\\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');\n            warn = true;\n          }\n\n          indexBy.set(group, true);\n        }\n\n        acc.push({\n          key: index,\n          index,\n          group,\n          options: [option]\n        });\n      }\n\n      return acc;\n    }, []);\n  }\n\n  return {\n    getRootProps: (other = {}) => _extends({\n      'aria-owns': listboxAvailable ? `${id}-listbox` : null,\n      role: 'combobox',\n      'aria-expanded': listboxAvailable\n    }, other, {\n      onKeyDown: handleKeyDown(other),\n      onMouseDown: handleMouseDown,\n      onClick: handleClick\n    }),\n    getInputLabelProps: () => ({\n      id: `${id}-label`,\n      htmlFor: id\n    }),\n    getInputProps: () => ({\n      id,\n      value: inputValue,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onChange: handleInputChange,\n      onMouseDown: handleInputMouseDown,\n      // if open then this is handled imperativeley so don't let react override\n      // only have an opinion about this when closed\n      'aria-activedescendant': popupOpen ? '' : null,\n      'aria-autocomplete': autoComplete ? 'both' : 'list',\n      'aria-controls': listboxAvailable ? `${id}-listbox` : null,\n      // Disable browser's suggestion that might overlap with the popup.\n      // Handle autocomplete but not autofill.\n      autoComplete: 'off',\n      ref: inputRef,\n      autoCapitalize: 'none',\n      spellCheck: 'false'\n    }),\n    getClearProps: () => ({\n      tabIndex: -1,\n      onClick: handleClear\n    }),\n    getPopupIndicatorProps: () => ({\n      tabIndex: -1,\n      onClick: handlePopupIndicator\n    }),\n    getTagProps: ({\n      index\n    }) => ({\n      key: index,\n      'data-tag-index': index,\n      tabIndex: -1,\n      onDelete: handleTagDelete(index)\n    }),\n    getListboxProps: () => ({\n      role: 'listbox',\n      id: `${id}-listbox`,\n      'aria-labelledby': `${id}-label`,\n      ref: handleListboxRef,\n      onMouseDown: event => {\n        // Prevent blur\n        event.preventDefault();\n      }\n    }),\n    getOptionProps: ({\n      index,\n      option\n    }) => {\n      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));\n      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n      return {\n        key: getOptionLabel(option),\n        tabIndex: -1,\n        role: 'option',\n        id: `${id}-option-${index}`,\n        onMouseOver: handleOptionMouseOver,\n        onClick: handleOptionClick,\n        onTouchStart: handleOptionTouchStart,\n        'data-option-index': index,\n        'aria-disabled': disabled,\n        'aria-selected': selected\n      };\n    },\n    id,\n    inputValue,\n    value,\n    dirty,\n    popupOpen,\n    focused: focused || focusedTag !== -1,\n    anchorEl,\n    setAnchorEl,\n    focusedTag,\n    groupedOptions\n  };\n}","map":{"version":3,"sources":["C:/Progetti/weight-control/app/node_modules/@material-ui/core/useAutocomplete/useAutocomplete.js"],"names":["_extends","React","setRef","useEventCallback","useControlled","unstable_useId","useId","stripDiacritics","string","normalize","replace","createFilterOptions","config","ignoreAccents","ignoreCase","limit","matchFrom","stringify","trim","options","inputValue","getOptionLabel","input","toLowerCase","filteredOptions","filter","option","candidate","indexOf","slice","findIndex","array","comp","i","length","defaultFilterOptions","pageSize","useAutocomplete","props","autoComplete","autoHighlight","autoSelect","blurOnSelect","clearOnBlur","freeSolo","clearOnEscape","componentName","defaultValue","multiple","disableClearable","disableCloseOnSelect","disabledItemsFocusable","disableListWrap","filterOptions","filterSelectedOptions","getOptionDisabled","getOptionLabelProp","_option$label","label","isOptionEqualToValue","value","groupBy","handleHomeEndKeys","id","idProp","includeInputInList","inputValueProp","onChange","onClose","onHighlightChange","onInputChange","onOpen","open","openProp","openOnFocus","selectOnFocus","valueProp","optionLabel","process","env","NODE_ENV","erroneousReturn","undefined","console","error","JSON","String","ignoreFocus","useRef","firstFocus","inputRef","listboxRef","anchorEl","setAnchorEl","useState","focusedTag","setFocusedTag","defaultHighlighted","highlightedIndexRef","setValueState","controlled","default","name","setInputValueState","state","focused","setFocused","resetInputValue","event","newValue","newInputValue","useEffect","setOpenState","inputPristine","setInputPristine","inputValueIsSelectedValue","popupOpen","some","value2","listboxAvailable","missingValue","warn","join","focusTag","tagToFocus","current","focus","querySelector","validOptionIndex","index","direction","nextFocus","nextFocusDisabled","disabled","getAttribute","hasAttribute","setHighlightedIndex","reason","removeAttribute","setAttribute","prev","classList","remove","listboxNode","parentElement","scrollTop","add","scrollHeight","clientHeight","element","scrollBottom","elementBottom","offsetTop","offsetHeight","changeHighlightedIndex","diff","getNextIndex","maxIndex","newIndex","Math","abs","nextIndex","setSelectionRange","syncHighlightedIndex","useCallback","valueItem","currentOption","val","itemIndex","optionItem","handleListboxRef","node","nodeName","handleOpen","handleClose","handleValue","details","isTouch","selectNewValue","reasonProp","origin","Array","isArray","matches","push","splice","ctrlKey","metaKey","blur","validTagIndex","handleFocusTag","nextTag","handleClear","handleKeyDown","other","onKeyDown","defaultMuiPrevented","key","which","preventDefault","stopPropagation","handleFocus","handleBlur","contains","document","activeElement","handleInputChange","target","handleOptionMouseOver","Number","currentTarget","handleOptionTouchStart","handleOptionClick","handleTagDelete","handlePopupIndicator","handleMouseDown","handleClick","selectionEnd","selectionStart","select","handleInputMouseDown","dirty","groupedOptions","indexBy","Map","reduce","acc","group","get","set","getRootProps","role","onMouseDown","onClick","getInputLabelProps","htmlFor","getInputProps","onBlur","onFocus","ref","autoCapitalize","spellCheck","getClearProps","tabIndex","getPopupIndicatorProps","getTagProps","onDelete","getListboxProps","getOptionProps","selected","onMouseOver","onTouchStart"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\n\n/* eslint-disable no-constant-condition */\nimport * as React from 'react';\nimport { setRef, useEventCallback, useControlled, unstable_useId as useId } from '../utils'; // https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript\n// Give up on IE11 support for this feature\n\nfunction stripDiacritics(string) {\n  return typeof string.normalize !== 'undefined' ? string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '') : string;\n}\n\nexport function createFilterOptions(config = {}) {\n  const {\n    ignoreAccents = true,\n    ignoreCase = true,\n    limit,\n    matchFrom = 'any',\n    stringify,\n    trim = false\n  } = config;\n  return (options, {\n    inputValue,\n    getOptionLabel\n  }) => {\n    let input = trim ? inputValue.trim() : inputValue;\n\n    if (ignoreCase) {\n      input = input.toLowerCase();\n    }\n\n    if (ignoreAccents) {\n      input = stripDiacritics(input);\n    }\n\n    const filteredOptions = options.filter(option => {\n      let candidate = (stringify || getOptionLabel)(option);\n\n      if (ignoreCase) {\n        candidate = candidate.toLowerCase();\n      }\n\n      if (ignoreAccents) {\n        candidate = stripDiacritics(candidate);\n      }\n\n      return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;\n    });\n    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;\n  };\n} // To replace with .findIndex() once we stop IE11 support.\n\nfunction findIndex(array, comp) {\n  for (let i = 0; i < array.length; i += 1) {\n    if (comp(array[i])) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nconst defaultFilterOptions = createFilterOptions(); // Number of options to jump in list box when pageup and pagedown keys are used.\n\nconst pageSize = 5;\nexport default function useAutocomplete(props) {\n  const {\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    componentName = 'useAutocomplete',\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    filterOptions = defaultFilterOptions,\n    filterSelectedOptions = false,\n    freeSolo = false,\n    getOptionDisabled,\n    getOptionLabel: getOptionLabelProp = option => {\n      var _option$label;\n\n      return (_option$label = option.label) !== null && _option$label !== void 0 ? _option$label : option;\n    },\n    isOptionEqualToValue = (option, value) => option === value,\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    multiple = false,\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open: openProp,\n    openOnFocus = false,\n    options,\n    selectOnFocus = !props.freeSolo,\n    value: valueProp\n  } = props;\n  const id = useId(idProp);\n  let getOptionLabel = getOptionLabelProp;\n\n  getOptionLabel = option => {\n    const optionLabel = getOptionLabelProp(option);\n\n    if (typeof optionLabel !== 'string') {\n      if (process.env.NODE_ENV !== 'production') {\n        const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;\n        console.error(`Material-UI: The \\`getOptionLabel\\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);\n      }\n\n      return String(optionLabel);\n    }\n\n    return optionLabel;\n  };\n\n  const ignoreFocus = React.useRef(false);\n  const firstFocus = React.useRef(true);\n  const inputRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [focusedTag, setFocusedTag] = React.useState(-1);\n  const defaultHighlighted = autoHighlight ? 0 : -1;\n  const highlightedIndexRef = React.useRef(defaultHighlighted);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: componentName\n  });\n  const [inputValue, setInputValueState] = useControlled({\n    controlled: inputValueProp,\n    default: '',\n    name: componentName,\n    state: 'inputValue'\n  });\n  const [focused, setFocused] = React.useState(false);\n  const resetInputValue = useEventCallback((event, newValue) => {\n    let newInputValue;\n\n    if (multiple) {\n      newInputValue = '';\n    } else if (newValue == null) {\n      newInputValue = '';\n    } else {\n      const optionLabel = getOptionLabel(newValue);\n      newInputValue = typeof optionLabel === 'string' ? optionLabel : '';\n    }\n\n    if (inputValue === newInputValue) {\n      return;\n    }\n\n    setInputValueState(newInputValue);\n\n    if (onInputChange) {\n      onInputChange(event, newInputValue, 'reset');\n    }\n  });\n  React.useEffect(() => {\n    resetInputValue(null, value);\n  }, [value, resetInputValue]);\n  const [open, setOpenState] = useControlled({\n    controlled: openProp,\n    default: false,\n    name: componentName,\n    state: 'open'\n  });\n  const [inputPristine, setInputPristine] = React.useState(true);\n  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);\n  const popupOpen = open;\n  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {\n    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {\n      return false;\n    }\n\n    return true;\n  }), // we use the empty string to manipulate `filterOptions` to not filter any options\n  // i.e. the filter predicate always returns true\n  {\n    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,\n    getOptionLabel\n  }) : [];\n  const listboxAvailable = open && filteredOptions.length > 0;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (value !== null && !freeSolo && options.length > 0) {\n      const missingValue = (multiple ? value : [value]).filter(value2 => !options.some(option => isOptionEqualToValue(option, value2)));\n\n      if (missingValue.length > 0) {\n        console.warn([`Material-UI: The value provided to ${componentName} is invalid.`, `None of the options match with \\`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\\`.`, 'You can use the `isOptionEqualToValue` prop to customize the equality test.'].join('\\n'));\n      }\n    }\n  }\n\n  const focusTag = useEventCallback(tagToFocus => {\n    if (tagToFocus === -1) {\n      inputRef.current.focus();\n    } else {\n      anchorEl.querySelector(`[data-tag-index=\"${tagToFocus}\"]`).focus();\n    }\n  }); // Ensure the focusedTag is never inconsistent\n\n  React.useEffect(() => {\n    if (multiple && focusedTag > value.length - 1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n  }, [value, multiple, focusedTag, focusTag]);\n\n  function validOptionIndex(index, direction) {\n    if (!listboxRef.current || index === -1) {\n      return -1;\n    }\n\n    let nextFocus = index;\n\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === filteredOptions.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n\n      const option = listboxRef.current.querySelector(`[data-option-index=\"${nextFocus}\"]`); // Same logic as MenuList.js\n\n      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';\n\n      if (option && !option.hasAttribute('tabindex') || nextFocusDisabled) {\n        // Move to the next element.\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n\n  const setHighlightedIndex = useEventCallback(({\n    event,\n    index,\n    reason = 'auto'\n  }) => {\n    highlightedIndexRef.current = index; // does the index exist?\n\n    if (index === -1) {\n      inputRef.current.removeAttribute('aria-activedescendant');\n    } else {\n      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);\n    }\n\n    if (onHighlightChange) {\n      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);\n    }\n\n    if (!listboxRef.current) {\n      return;\n    }\n\n    const prev = listboxRef.current.querySelector('[role=\"option\"].Mui-focused');\n\n    if (prev) {\n      prev.classList.remove('Mui-focused');\n      prev.classList.remove('Mui-focusVisible');\n    }\n\n    const listboxNode = listboxRef.current.parentElement.querySelector('[role=\"listbox\"]'); // \"No results\"\n\n    if (!listboxNode) {\n      return;\n    }\n\n    if (index === -1) {\n      listboxNode.scrollTop = 0;\n      return;\n    }\n\n    const option = listboxRef.current.querySelector(`[data-option-index=\"${index}\"]`);\n\n    if (!option) {\n      return;\n    }\n\n    option.classList.add('Mui-focused');\n\n    if (reason === 'keyboard') {\n      option.classList.add('Mui-focusVisible');\n    } // Scroll active descendant into view.\n    // Logic copied from https://www.w3.org/TR/wai-aria-practices/examples/listbox/js/listbox.js\n    //\n    // Consider this API instead once it has a better browser support:\n    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });\n\n\n    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse') {\n      const element = option;\n      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n      const elementBottom = element.offsetTop + element.offsetHeight;\n\n      if (elementBottom > scrollBottom) {\n        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {\n        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);\n      }\n    }\n  });\n  const changeHighlightedIndex = useEventCallback(({\n    event,\n    diff,\n    direction = 'next',\n    reason = 'auto'\n  }) => {\n    if (!popupOpen) {\n      return;\n    }\n\n    const getNextIndex = () => {\n      const maxIndex = filteredOptions.length - 1;\n\n      if (diff === 'reset') {\n        return defaultHighlighted;\n      }\n\n      if (diff === 'start') {\n        return 0;\n      }\n\n      if (diff === 'end') {\n        return maxIndex;\n      }\n\n      const newIndex = highlightedIndexRef.current + diff;\n\n      if (newIndex < 0) {\n        if (newIndex === -1 && includeInputInList) {\n          return -1;\n        }\n\n        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {\n          return 0;\n        }\n\n        return maxIndex;\n      }\n\n      if (newIndex > maxIndex) {\n        if (newIndex === maxIndex + 1 && includeInputInList) {\n          return -1;\n        }\n\n        if (disableListWrap || Math.abs(diff) > 1) {\n          return maxIndex;\n        }\n\n        return 0;\n      }\n\n      return newIndex;\n    };\n\n    const nextIndex = validOptionIndex(getNextIndex(), direction);\n    setHighlightedIndex({\n      index: nextIndex,\n      reason,\n      event\n    }); // Sync the content of the input with the highlighted option.\n\n    if (autoComplete && diff !== 'reset') {\n      if (nextIndex === -1) {\n        inputRef.current.value = inputValue;\n      } else {\n        const option = getOptionLabel(filteredOptions[nextIndex]);\n        inputRef.current.value = option; // The portion of the selected suggestion that has not been typed by the user,\n        // a completion string, appears inline after the input cursor in the textbox.\n\n        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());\n\n        if (index === 0 && inputValue.length > 0) {\n          inputRef.current.setSelectionRange(inputValue.length, option.length);\n        }\n      }\n    }\n  });\n  const syncHighlightedIndex = React.useCallback(() => {\n    if (!popupOpen) {\n      return;\n    }\n\n    const valueItem = multiple ? value[0] : value; // The popup is empty, reset\n\n    if (filteredOptions.length === 0 || valueItem == null) {\n      changeHighlightedIndex({\n        diff: 'reset'\n      });\n      return;\n    }\n\n    if (!listboxRef.current) {\n      return;\n    } // Synchronize the value with the highlighted index\n\n\n    if (valueItem != null) {\n      const currentOption = filteredOptions[highlightedIndexRef.current]; // Keep the current highlighted index if possible\n\n      if (multiple && currentOption && findIndex(value, val => isOptionEqualToValue(currentOption, val)) !== -1) {\n        return;\n      }\n\n      const itemIndex = findIndex(filteredOptions, optionItem => isOptionEqualToValue(optionItem, valueItem));\n\n      if (itemIndex === -1) {\n        changeHighlightedIndex({\n          diff: 'reset'\n        });\n      } else {\n        setHighlightedIndex({\n          index: itemIndex\n        });\n      }\n\n      return;\n    } // Prevent the highlighted index to leak outside the boundaries.\n\n\n    if (highlightedIndexRef.current >= filteredOptions.length - 1) {\n      setHighlightedIndex({\n        index: filteredOptions.length - 1\n      });\n      return;\n    } // Restore the focus to the previous index.\n\n\n    setHighlightedIndex({\n      index: highlightedIndexRef.current\n    }); // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [// Only sync the highlighted index when the option switch between empty and not\n  filteredOptions.length, // Don't sync the highlighted index with the value when multiple\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);\n  const handleListboxRef = useEventCallback(node => {\n    setRef(listboxRef, node);\n\n    if (!node) {\n      return;\n    }\n\n    syncHighlightedIndex();\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {\n        console.error([`Material-UI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, '', componentName === 'useAutocomplete' ? 'Make sure you have binded getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\\n'));\n      }\n    }, [componentName]);\n  }\n\n  React.useEffect(() => {\n    syncHighlightedIndex();\n  }, [syncHighlightedIndex]);\n\n  const handleOpen = event => {\n    if (open) {\n      return;\n    }\n\n    setOpenState(true);\n    setInputPristine(true);\n\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n\n  const handleClose = (event, reason) => {\n    if (!open) {\n      return;\n    }\n\n    setOpenState(false);\n\n    if (onClose) {\n      onClose(event, reason);\n    }\n  };\n\n  const handleValue = (event, newValue, reason, details) => {\n    if (value === newValue) {\n      return;\n    }\n\n    if (onChange) {\n      onChange(event, newValue, reason, details);\n    }\n\n    setValueState(newValue);\n  };\n\n  const isTouch = React.useRef(false);\n\n  const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options') => {\n    let reason = reasonProp;\n    let newValue = option;\n\n    if (multiple) {\n      newValue = Array.isArray(value) ? value.slice() : [];\n\n      if (process.env.NODE_ENV !== 'production') {\n        const matches = newValue.filter(val => isOptionEqualToValue(option, val));\n\n        if (matches.length > 1) {\n          console.error([`Material-UI: The \\`isOptionEqualToValue\\` method of ${componentName} do not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join('\\n'));\n        }\n      }\n\n      const itemIndex = findIndex(newValue, valueItem => isOptionEqualToValue(option, valueItem));\n\n      if (itemIndex === -1) {\n        newValue.push(option);\n      } else if (origin !== 'freeSolo') {\n        newValue.splice(itemIndex, 1);\n        reason = 'removeOption';\n      }\n    }\n\n    resetInputValue(event, newValue);\n    handleValue(event, newValue, reason, {\n      option\n    });\n\n    if (!disableCloseOnSelect && !event.ctrlKey && !event.metaKey) {\n      handleClose(event, reason);\n    }\n\n    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {\n      inputRef.current.blur();\n    }\n  };\n\n  function validTagIndex(index, direction) {\n    if (index === -1) {\n      return -1;\n    }\n\n    let nextFocus = index;\n\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n\n      const option = anchorEl.querySelector(`[data-tag-index=\"${nextFocus}\"]`); // Same logic as MenuList.js\n\n      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n\n  const handleFocusTag = (event, direction) => {\n    if (!multiple) {\n      return;\n    }\n\n    handleClose(event, 'toggleInput');\n    let nextTag = focusedTag;\n\n    if (focusedTag === -1) {\n      if (inputValue === '' && direction === 'previous') {\n        nextTag = value.length - 1;\n      }\n    } else {\n      nextTag += direction === 'next' ? 1 : -1;\n\n      if (nextTag < 0) {\n        nextTag = 0;\n      }\n\n      if (nextTag === value.length) {\n        nextTag = -1;\n      }\n    }\n\n    nextTag = validTagIndex(nextTag, direction);\n    setFocusedTag(nextTag);\n    focusTag(nextTag);\n  };\n\n  const handleClear = event => {\n    ignoreFocus.current = true;\n    setInputValueState('');\n\n    if (onInputChange) {\n      onInputChange(event, '', 'clear');\n    }\n\n    handleValue(event, multiple ? [] : null, 'clear');\n  };\n\n  const handleKeyDown = other => event => {\n    if (other.onKeyDown) {\n      other.onKeyDown(event);\n    }\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    if (focusedTag !== -1 && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) === -1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    } // Wait until IME is settled.\n\n\n    if (event.which !== 229) {\n      switch (event.key) {\n        case 'Home':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'start',\n              direction: 'next',\n              reason: 'keyboard',\n              event\n            });\n          }\n\n          break;\n\n        case 'End':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'end',\n              direction: 'previous',\n              reason: 'keyboard',\n              event\n            });\n          }\n\n          break;\n\n        case 'PageUp':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -pageSize,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n\n        case 'PageDown':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: pageSize,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n\n        case 'ArrowDown':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: 1,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n\n        case 'ArrowUp':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -1,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n\n        case 'ArrowLeft':\n          handleFocusTag(event, 'previous');\n          break;\n\n        case 'ArrowRight':\n          handleFocusTag(event, 'next');\n          break;\n\n        case 'Enter':\n          if (highlightedIndexRef.current !== -1 && popupOpen) {\n            const option = filteredOptions[highlightedIndexRef.current];\n            const disabled = getOptionDisabled ? getOptionDisabled(option) : false; // Avoid early form validation, let the end-users continue filling the form.\n\n            event.preventDefault();\n\n            if (disabled) {\n              return;\n            }\n\n            selectNewValue(event, option, 'selectOption'); // Move the selection to the end.\n\n            if (autoComplete) {\n              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n            }\n          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {\n            if (multiple) {\n              // Allow people to add new values before they submit the form.\n              event.preventDefault();\n            }\n\n            selectNewValue(event, inputValue, 'createOption', 'freeSolo');\n          }\n\n          break;\n\n        case 'Escape':\n          if (popupOpen) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault(); // Avoid the Modal to handle the event.\n\n            event.stopPropagation();\n            handleClose(event, 'escape');\n          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault(); // Avoid the Modal to handle the event.\n\n            event.stopPropagation();\n            handleClear(event);\n          }\n\n          break;\n\n        case 'Backspace':\n          if (multiple && inputValue === '' && value.length > 0) {\n            const index = focusedTag === -1 ? value.length - 1 : focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n\n          break;\n\n        default:\n      }\n    }\n  };\n\n  const handleFocus = event => {\n    setFocused(true);\n\n    if (openOnFocus && !ignoreFocus.current) {\n      handleOpen(event);\n    }\n  };\n\n  const handleBlur = event => {\n    // Ignore the event when using the scrollbar with IE11\n    if (listboxRef.current !== null && listboxRef.current.parentElement.contains(document.activeElement)) {\n      inputRef.current.focus();\n      return;\n    }\n\n    setFocused(false);\n    firstFocus.current = true;\n    ignoreFocus.current = false;\n\n    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {\n      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');\n    } else if (autoSelect && freeSolo && inputValue !== '') {\n      selectNewValue(event, inputValue, 'blur', 'freeSolo');\n    } else if (clearOnBlur) {\n      resetInputValue(event, value);\n    }\n\n    handleClose(event, 'blur');\n  };\n\n  const handleInputChange = event => {\n    const newValue = event.target.value;\n\n    if (inputValue !== newValue) {\n      setInputValueState(newValue);\n      setInputPristine(false);\n\n      if (onInputChange) {\n        onInputChange(event, newValue, 'input');\n      }\n    }\n\n    if (newValue === '') {\n      if (!disableClearable && !multiple) {\n        handleValue(event, null, 'clear');\n      }\n    } else {\n      handleOpen(event);\n    }\n  };\n\n  const handleOptionMouseOver = event => {\n    setHighlightedIndex({\n      event,\n      index: Number(event.currentTarget.getAttribute('data-option-index')),\n      reason: 'mouse'\n    });\n  };\n\n  const handleOptionTouchStart = () => {\n    isTouch.current = true;\n  };\n\n  const handleOptionClick = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    selectNewValue(event, filteredOptions[index], 'selectOption');\n    isTouch.current = false;\n  };\n\n  const handleTagDelete = index => event => {\n    const newValue = value.slice();\n    newValue.splice(index, 1);\n    handleValue(event, newValue, 'removeOption', {\n      option: value[index]\n    });\n  };\n\n  const handlePopupIndicator = event => {\n    if (open) {\n      handleClose(event, 'toggleInput');\n    } else {\n      handleOpen(event);\n    }\n  }; // Prevent input blur when interacting with the combobox\n\n\n  const handleMouseDown = event => {\n    if (event.target.getAttribute('id') !== id) {\n      event.preventDefault();\n    }\n  }; // Focus the input when interacting with the combobox\n\n\n  const handleClick = () => {\n    inputRef.current.focus();\n\n    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {\n      inputRef.current.select();\n    }\n\n    firstFocus.current = false;\n  };\n\n  const handleInputMouseDown = event => {\n    if (inputValue === '' || !open) {\n      handlePopupIndicator(event);\n    }\n  };\n\n  let dirty = freeSolo && inputValue.length > 0;\n  dirty = dirty || (multiple ? value.length > 0 : value !== null);\n  let groupedOptions = filteredOptions;\n\n  if (groupBy) {\n    // used to keep track of key and indexes in the result array\n    const indexBy = new Map();\n    let warn = false;\n    groupedOptions = filteredOptions.reduce((acc, option, index) => {\n      const group = groupBy(option);\n\n      if (acc.length > 0 && acc[acc.length - 1].group === group) {\n        acc[acc.length - 1].options.push(option);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          if (indexBy.get(group) && !warn) {\n            console.warn(`Material-UI: The options provided combined with the \\`groupBy\\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');\n            warn = true;\n          }\n\n          indexBy.set(group, true);\n        }\n\n        acc.push({\n          key: index,\n          index,\n          group,\n          options: [option]\n        });\n      }\n\n      return acc;\n    }, []);\n  }\n\n  return {\n    getRootProps: (other = {}) => _extends({\n      'aria-owns': listboxAvailable ? `${id}-listbox` : null,\n      role: 'combobox',\n      'aria-expanded': listboxAvailable\n    }, other, {\n      onKeyDown: handleKeyDown(other),\n      onMouseDown: handleMouseDown,\n      onClick: handleClick\n    }),\n    getInputLabelProps: () => ({\n      id: `${id}-label`,\n      htmlFor: id\n    }),\n    getInputProps: () => ({\n      id,\n      value: inputValue,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onChange: handleInputChange,\n      onMouseDown: handleInputMouseDown,\n      // if open then this is handled imperativeley so don't let react override\n      // only have an opinion about this when closed\n      'aria-activedescendant': popupOpen ? '' : null,\n      'aria-autocomplete': autoComplete ? 'both' : 'list',\n      'aria-controls': listboxAvailable ? `${id}-listbox` : null,\n      // Disable browser's suggestion that might overlap with the popup.\n      // Handle autocomplete but not autofill.\n      autoComplete: 'off',\n      ref: inputRef,\n      autoCapitalize: 'none',\n      spellCheck: 'false'\n    }),\n    getClearProps: () => ({\n      tabIndex: -1,\n      onClick: handleClear\n    }),\n    getPopupIndicatorProps: () => ({\n      tabIndex: -1,\n      onClick: handlePopupIndicator\n    }),\n    getTagProps: ({\n      index\n    }) => ({\n      key: index,\n      'data-tag-index': index,\n      tabIndex: -1,\n      onDelete: handleTagDelete(index)\n    }),\n    getListboxProps: () => ({\n      role: 'listbox',\n      id: `${id}-listbox`,\n      'aria-labelledby': `${id}-label`,\n      ref: handleListboxRef,\n      onMouseDown: event => {\n        // Prevent blur\n        event.preventDefault();\n      }\n    }),\n    getOptionProps: ({\n      index,\n      option\n    }) => {\n      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));\n      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n      return {\n        key: getOptionLabel(option),\n        tabIndex: -1,\n        role: 'option',\n        id: `${id}-option-${index}`,\n        onMouseOver: handleOptionMouseOver,\n        onClick: handleOptionClick,\n        onTouchStart: handleOptionTouchStart,\n        'data-option-index': index,\n        'aria-disabled': disabled,\n        'aria-selected': selected\n      };\n    },\n    id,\n    inputValue,\n    value,\n    dirty,\n    popupOpen,\n    focused: focused || focusedTag !== -1,\n    anchorEl,\n    setAnchorEl,\n    focusedTag,\n    groupedOptions\n  };\n}"]},"metadata":{},"sourceType":"module"}