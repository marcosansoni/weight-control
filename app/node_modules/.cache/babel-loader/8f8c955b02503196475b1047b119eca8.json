{"ast":null,"code":"import i18n from 'i18next';\nimport getData from '../../../../utils/fetchMethod/getData';\nimport Endpoint, { urlFactory } from '../../../../constants/Endpoint';\nimport EndpointStatus from '../../../../constants/EndpointStatus';\nimport LoginErrorCode from '../../constants/LoginErrorCode';\nimport Weight from '../../../../../entities/Weight';\nimport ErrorCode from '../../../../constants/ErrorCode';\nimport Notification from '../../../../../entities/Notification';\n\nfunction* getWeightSubWorker() {\n  const response = yield getData({\n    url: urlFactory(Endpoint.WEIGHT)\n  });\n  const {\n    data,\n    status\n  } = response || {};\n\n  if (status === EndpointStatus.NOT_FOUND) {\n    return {\n      errors: [new Notification({\n        message: i18n.t('home.snackbar.notFound'),\n        code: LoginErrorCode.NOT_FOUND\n      })]\n    };\n  }\n\n  if (status === EndpointStatus.BAD_REQUEST) {\n    var _data$errors;\n\n    return {\n      errors: [new Notification({\n        message: (_data$errors = data.errors) === null || _data$errors === void 0 ? void 0 : _data$errors[0],\n        code: LoginErrorCode.NOT_FOUND\n      })]\n    };\n  }\n\n  if (status === EndpointStatus.SUCCESS) {\n    var _data$result;\n\n    const weightById = {};\n    ((data === null || data === void 0 ? void 0 : (_data$result = data.result) === null || _data$result === void 0 ? void 0 : _data$result.entities) || []).forEach(w => {\n      weightById[w.id] = new Weight(w);\n    });\n    return {\n      result: {\n        weightById\n      }\n    };\n  } // Generic errorCode\n\n\n  return {\n    errors: [new Notification({\n      code: ErrorCode.DEFAULT\n    })]\n  };\n}\n\nexport default getWeightSubWorker;","map":{"version":3,"sources":["C:/Progetti/weight-control/app/src/store/state/home/worker/subworker/getWeightSubWorker.js"],"names":["i18n","getData","Endpoint","urlFactory","EndpointStatus","LoginErrorCode","Weight","ErrorCode","Notification","getWeightSubWorker","response","url","WEIGHT","data","status","NOT_FOUND","errors","message","t","code","BAD_REQUEST","SUCCESS","weightById","result","entities","forEach","w","id","DEFAULT"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,OAAOC,OAAP,MAAoB,uCAApB;AACA,OAAOC,QAAP,IAAmBC,UAAnB,QAAqC,gCAArC;AACA,OAAOC,cAAP,MAA2B,sCAA3B;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,OAAOC,YAAP,MAAyB,sCAAzB;;AAEA,UAAUC,kBAAV,GAA+B;AAC7B,QAAMC,QAAQ,GAAG,MAAMT,OAAO,CAAC;AAC7BU,IAAAA,GAAG,EAAER,UAAU,CAACD,QAAQ,CAACU,MAAV;AADc,GAAD,CAA9B;AAIA,QAAM;AACJC,IAAAA,IADI;AAEJC,IAAAA;AAFI,MAGFJ,QAAQ,IAAI,EAHhB;;AAKA,MAAII,MAAM,KAAKV,cAAc,CAACW,SAA9B,EAAyC;AACvC,WAAO;AACLC,MAAAA,MAAM,EACJ,CAAC,IAAIR,YAAJ,CAAiB;AAChBS,QAAAA,OAAO,EAAEjB,IAAI,CAACkB,CAAL,CAAO,wBAAP,CADO;AAEhBC,QAAAA,IAAI,EAAEd,cAAc,CAACU;AAFL,OAAjB,CAAD;AAFG,KAAP;AAOD;;AAED,MAAID,MAAM,KAAKV,cAAc,CAACgB,WAA9B,EAA2C;AAAA;;AACzC,WAAO;AACLJ,MAAAA,MAAM,EACJ,CAAC,IAAIR,YAAJ,CAAiB;AAChBS,QAAAA,OAAO,kBAAEJ,IAAI,CAACG,MAAP,iDAAE,aAAc,CAAd,CADO;AAEhBG,QAAAA,IAAI,EAAEd,cAAc,CAACU;AAFL,OAAjB,CAAD;AAFG,KAAP;AAOD;;AAED,MAAID,MAAM,KAAKV,cAAc,CAACiB,OAA9B,EAAuC;AAAA;;AACrC,UAAMC,UAAU,GAAG,EAAnB;AACA,KAAC,CAAAT,IAAI,SAAJ,IAAAA,IAAI,WAAJ,4BAAAA,IAAI,CAAEU,MAAN,8DAAcC,QAAd,KAA0B,EAA3B,EAA+BC,OAA/B,CAAwCC,CAAD,IAAO;AAC5CJ,MAAAA,UAAU,CAACI,CAAC,CAACC,EAAH,CAAV,GAAmB,IAAIrB,MAAJ,CAAWoB,CAAX,CAAnB;AACD,KAFD;AAGA,WAAO;AAAEH,MAAAA,MAAM,EAAE;AAAED,QAAAA;AAAF;AAAV,KAAP;AACD,GApC4B,CAsC7B;;;AACA,SAAO;AAAEN,IAAAA,MAAM,EAAE,CAAC,IAAIR,YAAJ,CAAiB;AAAEW,MAAAA,IAAI,EAAEZ,SAAS,CAACqB;AAAlB,KAAjB,CAAD;AAAV,GAAP;AACD;;AAED,eAAenB,kBAAf","sourcesContent":["import i18n from 'i18next';\r\nimport getData from '../../../../utils/fetchMethod/getData';\r\nimport Endpoint, { urlFactory } from '../../../../constants/Endpoint';\r\nimport EndpointStatus from '../../../../constants/EndpointStatus';\r\nimport LoginErrorCode from '../../constants/LoginErrorCode';\r\nimport Weight from '../../../../../entities/Weight';\r\nimport ErrorCode from '../../../../constants/ErrorCode';\r\nimport Notification from '../../../../../entities/Notification';\r\n\r\nfunction* getWeightSubWorker() {\r\n  const response = yield getData({\r\n    url: urlFactory(Endpoint.WEIGHT),\r\n  });\r\n\r\n  const {\r\n    data,\r\n    status,\r\n  } = response || {};\r\n\r\n  if (status === EndpointStatus.NOT_FOUND) {\r\n    return {\r\n      errors:\r\n        [new Notification({\r\n          message: i18n.t('home.snackbar.notFound'),\r\n          code: LoginErrorCode.NOT_FOUND,\r\n        })],\r\n    };\r\n  }\r\n\r\n  if (status === EndpointStatus.BAD_REQUEST) {\r\n    return {\r\n      errors:\r\n        [new Notification({\r\n          message: data.errors?.[0],\r\n          code: LoginErrorCode.NOT_FOUND,\r\n        })],\r\n    };\r\n  }\r\n\r\n  if (status === EndpointStatus.SUCCESS) {\r\n    const weightById = {};\r\n    (data?.result?.entities || []).forEach((w) => {\r\n      weightById[w.id] = new Weight(w);\r\n    });\r\n    return { result: { weightById } };\r\n  }\r\n\r\n  // Generic errorCode\r\n  return { errors: [new Notification({ code: ErrorCode.DEFAULT })] };\r\n}\r\n\r\nexport default getWeightSubWorker;\r\n"]},"metadata":{},"sourceType":"module"}