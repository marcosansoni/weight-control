{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport PropTypes from 'prop-types';\nimport { deepmerge } from '@material-ui/utils';\nimport merge from './merge'; // The breakpoint **start** at this value.\n// For instance with the first breakpoint xs: [xs, sm[.\n\nconst values = {\n  xs: 0,\n  sm: 600,\n  md: 960,\n  lg: 1280,\n  xl: 1920\n};\nconst defaultBreakpoints = {\n  // Sorted ASC by size. That's important.\n  // It can't be configured as it's used statically for propTypes.\n  keys: ['xs', 'sm', 'md', 'lg', 'xl'],\n  up: key => `@media (min-width:${values[key]}px)`\n};\nexport function handleBreakpoints(props, propValue, styleFromPropValue) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!props.theme) {\n      console.error('Material-UI: You are calling a style function without a theme value.');\n    }\n  }\n\n  if (Array.isArray(propValue)) {\n    const themeBreakpoints = props.theme.breakpoints || defaultBreakpoints;\n    return propValue.reduce((acc, item, index) => {\n      acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);\n      return acc;\n    }, {});\n  }\n\n  if (typeof propValue === 'object') {\n    const themeBreakpoints = props.theme.breakpoints || defaultBreakpoints;\n    return Object.keys(propValue).reduce((acc, breakpoint) => {\n      // key is breakpoint\n      if (Object.keys(themeBreakpoints.values || values).indexOf(breakpoint) !== -1) {\n        const mediaKey = themeBreakpoints.up(breakpoint);\n        acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);\n      } else {\n        const cssKey = breakpoint;\n        acc[cssKey] = propValue[cssKey];\n      }\n\n      return acc;\n    }, {});\n  }\n\n  const output = styleFromPropValue(propValue);\n  return output;\n}\n\nfunction breakpoints(styleFunction) {\n  const newStyleFunction = props => {\n    const base = styleFunction(props);\n    const themeBreakpoints = props.theme.breakpoints || defaultBreakpoints;\n    const extended = themeBreakpoints.keys.reduce((acc, key) => {\n      if (props[key]) {\n        acc = acc || {};\n        acc[themeBreakpoints.up(key)] = styleFunction(_extends({\n          theme: props.theme\n        }, props[key]));\n      }\n\n      return acc;\n    }, null);\n    return merge(base, extended);\n  };\n\n  newStyleFunction.propTypes = process.env.NODE_ENV !== 'production' ? _extends({}, styleFunction.propTypes, {\n    xs: PropTypes.object,\n    sm: PropTypes.object,\n    md: PropTypes.object,\n    lg: PropTypes.object,\n    xl: PropTypes.object\n  }) : {};\n  newStyleFunction.filterProps = ['xs', 'sm', 'md', 'lg', 'xl', ...styleFunction.filterProps];\n  return newStyleFunction;\n}\n\nexport function createEmptyBreakpointObject(breakpointsInput = {}) {\n  var _breakpointsInput$key;\n\n  const breakpointsInOrder = breakpointsInput === null || breakpointsInput === void 0 ? void 0 : (_breakpointsInput$key = breakpointsInput.keys) === null || _breakpointsInput$key === void 0 ? void 0 : _breakpointsInput$key.reduce((acc, key) => {\n    const breakpointStyleKey = breakpointsInput.up(key);\n    acc[breakpointStyleKey] = {};\n    return acc;\n  }, {});\n  return breakpointsInOrder || {};\n}\nexport function removeUnusedBreakpoints(breakpointKeys, style) {\n  return breakpointKeys.reduce((acc, key) => {\n    const breakpointOutput = acc[key];\n    const isBreakpointUnused = Object.keys(breakpointOutput).length === 0;\n\n    if (isBreakpointUnused) {\n      delete acc[key];\n    }\n\n    return acc;\n  }, style);\n}\nexport function mergeBreakpointsInOrder(breakpointsInput, ...styles) {\n  const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);\n  const mergedOutput = [emptyBreakpoints, ...styles].reduce((prev, next) => deepmerge(prev, next), {});\n  return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);\n}\nexport default breakpoints;","map":{"version":3,"sources":["C:/Progetti/weight-control/app/node_modules/@material-ui/system/esm/breakpoints.js"],"names":["_extends","PropTypes","deepmerge","merge","values","xs","sm","md","lg","xl","defaultBreakpoints","keys","up","key","handleBreakpoints","props","propValue","styleFromPropValue","process","env","NODE_ENV","theme","console","error","Array","isArray","themeBreakpoints","breakpoints","reduce","acc","item","index","Object","breakpoint","indexOf","mediaKey","cssKey","output","styleFunction","newStyleFunction","base","extended","propTypes","object","filterProps","createEmptyBreakpointObject","breakpointsInput","_breakpointsInput$key","breakpointsInOrder","breakpointStyleKey","removeUnusedBreakpoints","breakpointKeys","style","breakpointOutput","isBreakpointUnused","length","mergeBreakpointsInOrder","styles","emptyBreakpoints","mergedOutput","prev","next"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport PropTypes from 'prop-types';\nimport { deepmerge } from '@material-ui/utils';\nimport merge from './merge'; // The breakpoint **start** at this value.\n// For instance with the first breakpoint xs: [xs, sm[.\n\nconst values = {\n  xs: 0,\n  sm: 600,\n  md: 960,\n  lg: 1280,\n  xl: 1920\n};\nconst defaultBreakpoints = {\n  // Sorted ASC by size. That's important.\n  // It can't be configured as it's used statically for propTypes.\n  keys: ['xs', 'sm', 'md', 'lg', 'xl'],\n  up: key => `@media (min-width:${values[key]}px)`\n};\nexport function handleBreakpoints(props, propValue, styleFromPropValue) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!props.theme) {\n      console.error('Material-UI: You are calling a style function without a theme value.');\n    }\n  }\n\n  if (Array.isArray(propValue)) {\n    const themeBreakpoints = props.theme.breakpoints || defaultBreakpoints;\n    return propValue.reduce((acc, item, index) => {\n      acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);\n      return acc;\n    }, {});\n  }\n\n  if (typeof propValue === 'object') {\n    const themeBreakpoints = props.theme.breakpoints || defaultBreakpoints;\n    return Object.keys(propValue).reduce((acc, breakpoint) => {\n      // key is breakpoint\n      if (Object.keys(themeBreakpoints.values || values).indexOf(breakpoint) !== -1) {\n        const mediaKey = themeBreakpoints.up(breakpoint);\n        acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);\n      } else {\n        const cssKey = breakpoint;\n        acc[cssKey] = propValue[cssKey];\n      }\n\n      return acc;\n    }, {});\n  }\n\n  const output = styleFromPropValue(propValue);\n  return output;\n}\n\nfunction breakpoints(styleFunction) {\n  const newStyleFunction = props => {\n    const base = styleFunction(props);\n    const themeBreakpoints = props.theme.breakpoints || defaultBreakpoints;\n    const extended = themeBreakpoints.keys.reduce((acc, key) => {\n      if (props[key]) {\n        acc = acc || {};\n        acc[themeBreakpoints.up(key)] = styleFunction(_extends({\n          theme: props.theme\n        }, props[key]));\n      }\n\n      return acc;\n    }, null);\n    return merge(base, extended);\n  };\n\n  newStyleFunction.propTypes = process.env.NODE_ENV !== 'production' ? _extends({}, styleFunction.propTypes, {\n    xs: PropTypes.object,\n    sm: PropTypes.object,\n    md: PropTypes.object,\n    lg: PropTypes.object,\n    xl: PropTypes.object\n  }) : {};\n  newStyleFunction.filterProps = ['xs', 'sm', 'md', 'lg', 'xl', ...styleFunction.filterProps];\n  return newStyleFunction;\n}\n\nexport function createEmptyBreakpointObject(breakpointsInput = {}) {\n  var _breakpointsInput$key;\n\n  const breakpointsInOrder = breakpointsInput === null || breakpointsInput === void 0 ? void 0 : (_breakpointsInput$key = breakpointsInput.keys) === null || _breakpointsInput$key === void 0 ? void 0 : _breakpointsInput$key.reduce((acc, key) => {\n    const breakpointStyleKey = breakpointsInput.up(key);\n    acc[breakpointStyleKey] = {};\n    return acc;\n  }, {});\n  return breakpointsInOrder || {};\n}\nexport function removeUnusedBreakpoints(breakpointKeys, style) {\n  return breakpointKeys.reduce((acc, key) => {\n    const breakpointOutput = acc[key];\n    const isBreakpointUnused = Object.keys(breakpointOutput).length === 0;\n\n    if (isBreakpointUnused) {\n      delete acc[key];\n    }\n\n    return acc;\n  }, style);\n}\nexport function mergeBreakpointsInOrder(breakpointsInput, ...styles) {\n  const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);\n  const mergedOutput = [emptyBreakpoints, ...styles].reduce((prev, next) => deepmerge(prev, next), {});\n  return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);\n}\nexport default breakpoints;"]},"metadata":{},"sourceType":"module"}